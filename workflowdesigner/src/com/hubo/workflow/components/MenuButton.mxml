<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-7-12</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:graphic="com.hubo.workflow.components.graphic.*"
		 rollOut="handler(event)"
		 rollOver="handler(event)"
		 mouseDown="handler(event)"
		 mouseUp="handler(event)"
		 click="handler(event)"
		 height="37"
		 minWidth="85">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.hubo.workflow.components.graphic.Triangle;
			import com.hubo.workflow.util.Global;
			
			import mx.controls.Alert;
			
			import spark.components.HGroup;
			import spark.components.Label;
			
			private var textTag:Label;
			
			private var dropDownMenu:HGroup;
			
			private var triangle:Triangle;
			
			/**
			 * 菜单显示名称
			 */
			private var _text:String;
			
			/**
			 * 菜单容器，文字显示类型
			 */
			private var _texttype:String = "text";
			
			/**
			 * 菜单显示名称颜色
			 */
			private var _textcolor:uint;
			
			/**
			 * 菜单容器，是否具备背景颜色
			 */
			private var _isBgEvent:Boolean = true;
			
			/**
			 * 菜单容器，是否具有二级菜单标识。当值为true，容器中会自动创建标识“三角形”
			 */
			private var _isDropDownMenu:Boolean = false;
			
			private var bgTimer:Timer;
			
			/**
			 * 菜单容器，所关联的二级菜单在某种特定触发情况下是否为可见状态
			 */
			private var _hasShownToMenu:Boolean = false;
			
			/**
			 * <p>设定鼠标在移出或移过按钮组件时，是否改变内部组件的颜色值</p>
			 * 
			 * 当内部组件为VectorFig或其属性name=="VectorFig"时，其本身的值为true才会生效
			 */
			private var _triangleOver:Boolean = false;
			
			/**
			 * 三角形默认颜色
			 */
			private var _triangleOriginalColor:uint=0xA0A0A0;
			
			/**
			 * 三角形移入颜色
			 */
			private var _triangleOverColor:uint=0xE40000;
			
			private var _menutype:String;
			
			/**
			 * 初始化创建对象
			 */
			override protected function createChildren():void
			{
				super.createChildren();
				
				if(text && textTag == null && isDropDownMenu == false)
				{
					textTag = new Label();
					
					this.addElement(textTag);
				}

				if(text && textTag == null && isDropDownMenu)
				{
					textTag = new Label();
					
					triangle = new Triangle();
					
					dropDownMenu = new HGroup();
					
					dropDownMenu.addElement(textTag);
					dropDownMenu.addElement(triangle);
					this.addElement(dropDownMenu);
				}
			}
			
			/**
			 * 初始化更新属性
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if(isBgEvent)
				{
					useHandCursor=true;
					buttonMode=true;	
				}
				
				if(textTag)
				{
					textTag.text = this.text;
					textTag.maxDisplayedLines = 1;
					
					if(texttype == "title" && isDropDownMenu == false)
					{
						textTag.verticalCenter = 0;
						textTag.maxWidth = this.width-15;
						textTag.setStyle("fontSize", 18);
						textTag.setStyle("color", 0xDA2323);
						textTag.setStyle("fontFamily", "微软雅黑,黑体");
						textTag.left = 10;
					}
					
					if(texttype == "text" && isDropDownMenu == false)
					{
						textTag.verticalCenter = 0;
						textTag.setStyle("fontSize", 12);
						textcolor.toString()=="0" ? null : textTag.setStyle("color", textcolor);
						textTag.setStyle("fontFamily", "宋体");
						textTag.horizontalCenter = 0;
					}
					
					if(texttype == "text" && isDropDownMenu && dropDownMenu && triangle)
					{
						dropDownMenu.horizontalCenter = 0;
						dropDownMenu.verticalCenter = 0;
						dropDownMenu.gap = 12;
						dropDownMenu.verticalAlign = "middle";
						
						textTag.maxDisplayedLines = 1;
						textTag.setStyle("fontSize", 12);
						textcolor.toString()=="0" ? null : textTag.setStyle("color", textcolor);
						textTag.setStyle("fontFamily", "宋体");
						
						triangle.rollMask = true;
					}
				}
			}
			
			/**
			 * 当前菜单对象容器相关事件。
			 */
			protected function handler(event:MouseEvent):void
			{
				this.changeState(event.type);
			}
			
			protected function changeState(type:String):void
			{
				if(isBgEvent == false)return;
				
				switch(type)
				{
					case MouseEvent.ROLL_OUT :
						this.hideBg();
						break;
					
					case MouseEvent.ROLL_OVER :
						this.currentState = "over";
						break;
					
					case MouseEvent.CLICK :
						break;
					
					case MouseEvent.MOUSE_UP :
						break;
					
					case MouseEvent.MOUSE_DOWN :
						break;
					
					default:
						break;
				}
			}
			
			private function hideBg():void
			{
				Global.stopTimer(bgTimer);
				bgTimer = new Timer(20, 1);
				bgTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function closeAlert(event:Event):void
				{
					currentState = "default";
					Global.stopTimer(bgTimer);
				}, false, 0, true);
				
				bgTimer.start();
			}
			
			/**
			 * 菜单容器鼠标移入时，该变三角形颜色
			 */
			public function setTriangleRolloverColor(color:uint):void
			{
				if(!triangle)return;
				
				triangle.overColor = color;
				triangle.changeBgColor(MouseEvent.ROLL_OVER);
			}
			
			/**
			 * 菜单容器鼠标移出时，该变三角形颜色
			 */
			public function setTriangleRolloutColor(color:uint):void
			{
				if(!triangle)return;
				
				triangle.originalColor = color;
				triangle.changeBgColor(MouseEvent.ROLL_OUT);
			}
			
			public function addedBgStyle():void
			{
				this.setTriangleRolloverColor(triangleOverColor);
				this.currentState = "over";
				Global.stopTimer(bgTimer);
			}
			
			public function removeBgStyle():void
			{
				this.setTriangleRolloverColor(triangleOriginalColor);
				this.currentState = "default";
				Global.stopTimer(bgTimer);
			}
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// get and set
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			public function get text():String
			{
				return _text;
			}

			public function set text(value:String):void
			{
				_text = value;
			}

			public function get texttype():String
			{
				return _texttype;
			}

			[Inspectable(category="String", enumeration="text,title", defaultValue="text")]
			public function set texttype(value:String):void
			{
				_texttype = value;
			}

			public function get textcolor():uint
			{
				return _textcolor;
			}

			public function set textcolor(value:uint):void
			{
				_textcolor = value;
			}

			public function get isBgEvent():Boolean
			{
				return _isBgEvent;
			}

			public function set isBgEvent(value:Boolean):void
			{
				_isBgEvent = value;
			}

			public function get isDropDownMenu():Boolean
			{
				return _isDropDownMenu;
			}

			public function set isDropDownMenu(value:Boolean):void
			{
				_isDropDownMenu = value;
			}

			public function get hasShownToMenu():Boolean
			{
				return _hasShownToMenu;
			}

			public function set hasShownToMenu(value:Boolean):void
			{
				_hasShownToMenu = value;
			}

			public function get triangleOver():Boolean
			{
				return _triangleOver;
			}

			public function set triangleOver(value:Boolean):void
			{
				_triangleOver = value;
			}

			public function get triangleOriginalColor():uint
			{
				return _triangleOriginalColor;
			}

			public function set triangleOriginalColor(value:uint):void
			{
				_triangleOriginalColor = value;
			}

			public function get triangleOverColor():uint
			{
				return _triangleOverColor;
			}

			public function set triangleOverColor(value:uint):void
			{
				_triangleOverColor = value;
			}

			public function get menutype():String
			{
				return _menutype;
			}

			public function set menutype(value:String):void
			{
				_menutype = value;
			}


		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default"/>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="out" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!--背景-->
	<s:Rect   height="100%" width="100%" bottom="0" horizontalCenter="0">
		<s:fill>
			<s:SolidColor color.default="#FFFFFF" color.over="#ECECEC" />
		</s:fill>
	</s:Rect>	
	
	<!--bottom-->
	<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#EFEDEC" weight="1" caps="square"/>
		</s:stroke>
	</s:Line>
	
	<!--top-->
	<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" top="0">
		<s:stroke>
			<s:SolidColorStroke color="#EFEDEC" weight="1" caps="square"/>
		</s:stroke>
	</s:Line>
	
	<!--<s:Label maxDisplayedLines="1" maxWidth="210"  fontSize="18" color="#DA2323" text="请假审批流程" fontFamily="微软雅黑,黑体" left="10" verticalCenter="0"/>-->
	<!--<s:Label maxDisplayedLines="1" fontSize="12"  text="立即保存" fontFamily="宋体"  horizontalCenter="0" verticalCenter="0"/>-->
	<!--
	<s:HGroup horizontalCenter="0" verticalCenter="0" gap="8" verticalAlign="middle">
		<s:Label maxDisplayedLines="1"  fontSize="12" text="立即保存" fontFamily="宋体"/>
		<graphic:Triangle/>
	</s:HGroup>
	-->
</s:Group>
