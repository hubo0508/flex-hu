<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-7-1</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:navigation="com.hubo.workflow.ui.navigation.*" 
		 initialize="initializeHandler(event)" 
		 creationComplete="creationComplete(event)"
		 width="100%"
		 height="100%" >
	
	<fx:Script>
		<![CDATA[
			import com.hubo.workflow.components.MenuButton;
			import com.hubo.workflow.components.Node;
			import com.hubo.workflow.components.NodeGroup;
			import com.hubo.workflow.components.graphic.Ellipse;
			import com.hubo.workflow.components.graphic.IconEnd;
			import com.hubo.workflow.components.graphic.IconPersion;
			import com.hubo.workflow.components.graphic.IconStart;
			import com.hubo.workflow.core.TweenLite;
			import com.hubo.workflow.ui.navigation.child.AlignmentTools;
			import com.hubo.workflow.ui.navigation.child.NodeTools;
			import com.hubo.workflow.util.Global;
			import com.hubo.workflow.util.UIUtil;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.effects.Zoom;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			import spark.primitives.Path;
			import spark.skins.spark.BorderContainerSkin;
			
			/**
			 * 二级菜单显示，或消失计时器
			 */
			private var secondaryMenuTimer:Timer;
			
			/**
			 * 鼠标移入一级菜单对象时，将菜单显示名称赋予当前变量
			 */
			private var currentMenuText:String;
			
			/**
			 * 鼠标移入一级菜单对象时，将菜单ID赋予当前变量
			 */
			private var currentMenuId:String;
			
			/**
			 * 缓存二级菜单对象
			 */
			private var cacheSecondaryMenu:Array = [];
			
			private var tempNode:Node;
			
			private var zoom:Zoom;
			
			/**
			 * 鼠标点击舞台不松开，拖动鼠标时，记录第一次点击的
			 */
			private var drawBgRectPoint:Point;
			
			/**
			 * 系统初始化调用
			 */
			protected function initializeHandler(event:FlexEvent):void
			{
				
			}
			
			protected function creationComplete(event:FlexEvent):void
			{
				this.initEvent();
			}
			
			/**
			 * 初始化事件监听
			 */
			private function initEvent():void
			{
				this.menu.addEventListener(Menu.ROLL_MENU_LEVEL,rollMenuHandler,false,0,true);
				this.menu.addEventListener(Menu.CLICK_MENU_LEVEL, clickMenuHandler,false,0,true);
				
				this.secondaryMenu.addEventListener(MouseEvent.ROLL_OUT,secondaryMenuHandler,false,0,true);
				this.secondaryMenu.addEventListener(MouseEvent.ROLL_OVER,secondaryMenuHandler,false,0,true);
				
				this.content.addEventListener(MouseEvent.CLICK,contentHandler,false,0,true);
				this.content.addEventListener(MouseEvent.MOUSE_MOVE,contentHandler,false,0,true);
				this.content.addEventListener(MouseEvent.MOUSE_DOWN,contentHandler,false,0,true);
				this.content.addEventListener(MouseEvent.MOUSE_UP,contentHandler,false,0,true);
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				if(!zoom)
				{
					zoom = new Zoom();			
				}
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if(zoom)
				{
					zoom.zoomWidthTo	= 1;
					zoom.zoomHeightTo	= 1;
					//zoom.zoomWidthFrom	= 0.5;
					//zoom.zoomHeightFrom	= 0.5;
					zoom.duration	= 200;
				}
			}
			
			public function keyboardHandler(event:KeyboardEvent):void
			{
				switch(event.type)
				{
					case KeyboardEvent.KEY_DOWN :
						break;
					
					case KeyboardEvent.KEY_UP :
						switch(event.keyCode)
						{
							case Keyboard.ESCAPE:
								if(tempNode)
								{
									this.content.removeElement(tempNode);
									tempNode = null;
								}
								break;
							
							case Keyboard.DELETE:
								this.content.removeSelected();
								
							case Keyboard.RIGHT ://右 
								break;
							
							case 38 ://上 
								break;
							
							case 40 ://下  
								break;
							
							case Keyboard.LEFT ://左 
								break;
							
							default:
								break;
						}
						break;
					
					default:
						break;
				}
			}
			
			protected function contentHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.CLICK :
						break;
					
					case MouseEvent.MOUSE_DOWN :
						if(!(event.target is Node) && !(event.target is Label) && !tempNode)
						{
							this.content.cleanSelectedAll();
						}
						
						drawBgRectPoint = new Point(content.mouseX,content.mouseY);
						break;
					
					case MouseEvent.MOUSE_UP:
						if(tempNode && event.target is Node)
						{
							tempNode.selectedvisible(true);
							
							tempNode.addEventListener(MouseEvent.CLICK,nodeHandler,false,0,true);
							tempNode.addEventListener(MouseEvent.ROLL_OUT,nodeHandler,false,0,true);
							tempNode.addEventListener(MouseEvent.ROLL_OVER,nodeHandler,false,0,true);
							tempNode.addEventListener(MouseEvent.MOUSE_DOWN,nodeHandler,false,0,true);
							tempNode.addEventListener(MouseEvent.MOUSE_UP,nodeHandler,false,0,true);
							
							zoom.play([tempNode]);
							tempNode = null;
						}
						
						drawBgRectPoint = null;
						bgRect.graphics.clear();
						break;
					
					case MouseEvent.MOUSE_MOVE :
						tempNode ? changeTempNodeXY() : null;
						
						if(drawBgRectPoint == null || event.target is Node)break;
						
						var dx:Number = content.mouseX - drawBgRectPoint.x;
						var dy:Number = content.mouseY - drawBgRectPoint.y;
						
						bgRect.graphics.clear();
						bgRect.graphics.beginFill(0x3399FF, 0.1);
						bgRect.graphics.lineStyle(1,0x3399FF);
						bgRect.graphics.drawRect(drawBgRectPoint.x,drawBgRectPoint.y,dx,dy);
						
						//this.locationElementNodes();
						break;
					
					default:
						break;
				}
			}
			
			protected function clickMenuHandler(event:DynamicEvent):void
			{
				switch(event.menutype)
				{
					case Menu.ALIGNMENT :
						break;
					
					case Menu.CANCEL :
						break;
					
					case Menu.GRID :
						break;
					
					case Menu.LOG :
						break;
					
					case Menu.NODE :
						break;
					
					case Menu.SAVE :
						break;
					
					case Menu.VERIFICATION:
						break;
					
					case Menu.ZOOM:
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 二级菜单MouseEvent.ROLL_OUT与MouseEvent.ROLL_OVER事件
			 */
			protected function secondaryMenuHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						this.hideSecondaryMenu(secondaryMenu);
						this.menu.removeBgStyle(currentMenuText);
						break;
					
					case MouseEvent.ROLL_OVER :
						Global.stopTimer(secondaryMenuTimer);
						this.menu.stopMenuTimer(currentMenuText);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 一级菜单MouseEvent.ROLL_OUT与MouseEvent.ROLL_OVER事件
			 */
			protected function rollMenuHandler(event:DynamicEvent):void
			{
				this.currentMenuText = event.text;
				this.currentMenuId = event.menutype;
				
				switch(event.rolltype)
				{
					case MouseEvent.ROLL_OUT :
						this.hideSecondaryMenu(secondaryMenu);
						this.menu.hasShownToMenu(this.currentMenuText,  false);
						break;
					
					case MouseEvent.ROLL_OVER :
						this.showSecondaryMenu(secondaryMenu,event);
						this.menu.addedBgStyle(currentMenuText);
						this.menu.hasShownToMenu(this.currentMenuText, true);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 显示二级菜单组件
			 *
			 * @param sm:SecondaryMenu 二级菜单容器
			 * @param menuText:String 菜单显示名称
			 */
			private function showSecondaryMenu(sm:SecondaryMenu, dye:DynamicEvent):void
			{
				if(secondaryMenuTimer)
				{
					secondaryMenu.removeContent();
				}
				
				Global.stopTimer(secondaryMenuTimer);
				
				switch(dye.menutype)
				{
					case Menu.ALIGNMENT :
						if(cacheSecondaryMenu[Menu.ALIGNMENT] == undefined)
						{
							var alignment:AlignmentTools = new AlignmentTools();
							alignment.id = Menu.ALIGNMENT;
							alignment.verticalCenter = 0;
							alignment.x = dye.x - alignment.width*0.5 + dye.menubuttonwidth*0.5;
							cacheSecondaryMenu[Menu.ALIGNMENT] = alignment;
						}
						secondaryMenu.addContent(cacheSecondaryMenu[Menu.ALIGNMENT]);
						break;
					
					case Menu.NODE :
						if(cacheSecondaryMenu[Menu.NODE] == undefined)
						{
							var node:NodeTools = new NodeTools();
							node.id = Menu.NODE;
							node.verticalCenter = 0;
							node.x = dye.x;
							node.addEventListener(NodeTools.CLICK_NODE,clickNodeToolsHandler,false,0,true);
							cacheSecondaryMenu[Menu.NODE] = node;
						}
						secondaryMenu.addContent(cacheSecondaryMenu[Menu.NODE]);
						break;
					
					case Menu.ZOOM:
						break;
					
					default:
						break;
				}
				
				sm.top = 100;
				//new TweenLite(sm, .2, {top: 125, onComplete:function():void{}});
				new TweenLite(sm, .2, {top: 125});
			}
			
			/**
			 * 隐藏二级菜单组件
			 *
			 * @param sm:SecondaryMenu 二级菜单容器
			 */
			private function hideSecondaryMenu(sm:SecondaryMenu):void
			{
				Global.stopTimer(secondaryMenuTimer);
				secondaryMenuTimer = new Timer(80, 1);
				secondaryMenuTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function closeAlert(event:Event):void
				{
					secondaryMenu.removeContent();
					//new TweenLite(secondaryMenu, .3, {top:87});
					secondaryMenu.top = 87;
					Global.stopTimer(secondaryMenuTimer);
				}, false, 0, true);
				
				secondaryMenuTimer.start();
			}
			
			/**
			 * 点击二级菜单中的，节点图标
			 */
			protected function clickNodeToolsHandler(dye:DynamicEvent):void
			{
				tempNode = new Node();
				var icon:Object = null;				
				switch(dye.name)
				{
					case NodeTools.START :
						icon = new IconStart();
						break;
					
					case NodeTools.PERSION :
						icon = new IconPersion();
						break;
					
					case NodeTools.END :
						icon = new IconEnd();
						break;
					
					default:
						break;
				}
				
				if(icon)
				{
					icon.width = dye.graphicWidth;
					icon.height = dye.graphicHeight;
					icon.top = dye.graphicTop;
					icon.horizontalCenter = dye.graphicHorizontalCenter;
					
					tempNode.text = dye.text;
					changeTempNodeXY();
					tempNode.scaleX = 0.5;
					tempNode.scaleY = 0.5;
					
					tempNode.addIcon(icon as IVisualElement);
					
					content.addElement(tempNode);
				}
			}
			
			private function changeTempNodeXY():void
			{
				if(tempNode)
				{
					tempNode.x = this.content.mouseX-20;
					tempNode.y = this.content.mouseY-15;
				}
			}
			
			protected function nodeHandler(event:MouseEvent):void
			{
				var node:Node = event.currentTarget as Node;
				switch(event.type)
				{
					case MouseEvent.CLICK :
						
						break;
					
					case MouseEvent.ROLL_OUT :
						break;
					
					case MouseEvent.ROLL_OVER :
						break;
					
					case MouseEvent.MOUSE_DOWN :
						node.selectedvisible(true);
						node.startDrag();
						break;
					
					case MouseEvent.MOUSE_UP :
						node.stopDrag();
						break;
					
					default:
						break;
				}
			}
		]]>
	</fx:Script>
	
	<navigation:Head id="head"/>
	
	<mx:UIComponent id="bgRect"  top="125"	bottom="23"	width="100%"/>
	
	<navigation:Content id="content"/>
	
	<navigation:SecondaryMenu id="secondaryMenu" />
	
	<navigation:Menu id="menu" />
	
	<navigation:LogOutput id="log"/>

</s:Group>
