<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   creationComplete="creationCompleteHandler(event)"
				   mouseOut="bordercontainer1_mouseOutHandler(event)"
				   mouseOver="bordercontainer1_mouseOverHandler(event)"
				   backgroundColor="#E6E9E6"
				   borderColor="#CDCDCD"
				   cornerRadius="5">
	<fx:Script>
		<![CDATA[
			import com.hongguan.event.PanelEvent;
			import com.hongguan.util.IconStrConst;
			
			import mx.controls.Image;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.filters.GlowFilter;
			
			private var objContent:IVisualElement;
			
			private var _closeBtn:Boolean = true;
			
			private var _maximizeBtn:Boolean = true;
			
			private var _minimizeBtn:Boolean = true;
			
			private var _bottomRect:int = 0;
			
			private var _title:String;
			
			private var contentH:int;
			
			public static const CLOSE_BTN:String = "CLOSE_BTN";
			public static const MAXIMIZE_BTN:String = "MAXIMIZE_BTN";
			public static const MINIMIZE_BTN:String = "MINIMIZE_BTN";				

			[Bindable]
			public function get bottomRect():int
			{
				return _bottomRect;
			}

			public function set bottomRect(value:int):void
			{
				_bottomRect = value;
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.initWinBtn();
				this.initContent();
			}
			
			private function initContent():void
			{
				if(!this.objContent)return;
				this.content_BC.addElement(this.objContent);
			}
			
			public function initWinBtn():void
			{
				if(!this.closeBtn)
				{
					btn_group.removeElement(this.close_img);
				}
				
				if(!this.maximizeBtn)
				{
					btn_group.removeElement(this.maximize_img);
				}
					
				if(!this.minimizeBtn)
				{
					btn_group.removeElement(this.minimize_img);
				}
			}
			
			public function set content(obj:IVisualElement):void
			{
				this.objContent = obj;
			}
			
			protected function closeBtn_img_ClickHandler(event:MouseEvent):void
			{
				this.dispatchPanelEvent(CLOSE_BTN);
			}
			
			protected function maximizeBtn_img_ClickHandler(event:MouseEvent):void
			{
				this.dispatchPanelEvent(MAXIMIZE_BTN);
			}
			
			protected function minimizeBtn_img_ClickHandler(event:MouseEvent):void
			{
				this.dispatchPanelEvent(MINIMIZE_BTN);
			}
			
			protected function img_MouseOutHandler(event:MouseEvent):void
			{
				var img:Image=event.currentTarget as Image;
				img.filters=[];
			}
			
			protected function img_MouseOverHandler(event:MouseEvent):void
			{
				var img:Image=event.currentTarget as Image;
				img.filters=[this.glowFilter()];
			}			
			
			private function dispatchPanelEvent(type:String):void
			{
				var e:PanelEvent = new PanelEvent(PanelEvent.PANEL_EVENT);
				e.clickType = type;
				
				this.dispatchEvent(e);
			}
			
			private function createImage(right:int,top:int=5):Image
			{
				var img:Image = new Image();
				img.right = right;
				img.top = top;
				
				return img;
			}
			
			private function glowFilter():spark.filters.GlowFilter
			{
				var glow:spark.filters.GlowFilter = new spark.filters.GlowFilter();
				glow.blurX = 15;
				glow.blurY = 15;
				glow.alpha = 1;
				glow.color = 0x0033ff;
				glow.knockout = false;
				glow.quality = 	1;
				glow.strength = 1;
				glow.inner = false;
				
				return glow;
			}
		

			public function get maximizeBtn():Boolean
			{
				return _maximizeBtn;
			}

			public function set maximizeBtn(value:Boolean):void
			{
				_maximizeBtn = value;
			}

			public function get closeBtn():Boolean
			{
				return _closeBtn;
			}

			public function set closeBtn(value:Boolean):void
			{
				_closeBtn = value;
			}
			
			[Bindable]
			public function get title():String
			{
				return _title;
			}
			
			public function set title(value:String):void
			{
				_title = value;
			}

			public function get minimizeBtn():Boolean
			{
				return _minimizeBtn;
			}
			
			public function set minimizeBtn(value:Boolean):void
			{
				_minimizeBtn = value;
			}

			protected function bordercontainer1_mouseOverHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}


			protected function bordercontainer1_mouseOutHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}
			
			public function hideContent():void
			{
				if(!this.content_BC.visible)return;
				
				this.contentH = this.height;
				this.height = 30;
				this.content_BC.visible = false;
			}
			
			public function showContent():void
			{
				if(this.content_BC.visible)return;
				
				this.height = this.contentH;
				this.contentH = 0;
				this.content_BC.visible = true;
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="panelEvent",type="com.hongguan.event.PanelEvent")]
	</fx:Metadata>
	
	<s:HGroup top="5" right="5" gap="2" id="btn_group">
		<mx:Image useHandCursor="true" buttonMode="true" id="minimize_img" source="{IconStrConst.minimize}" click="minimizeBtn_img_ClickHandler(event)" mouseOut="img_MouseOutHandler(event)" mouseOver="img_MouseOverHandler(event)"/>
		<mx:Image useHandCursor="true" buttonMode="true" id="maximize_img" source="{IconStrConst.maximize}" click="maximizeBtn_img_ClickHandler(event)" mouseOut="img_MouseOutHandler(event)" mouseOver="img_MouseOverHandler(event)"/>		
		<mx:Image useHandCursor="true" buttonMode="true" id="close_img" source="{IconStrConst.close}" click="closeBtn_img_ClickHandler(event)" mouseOut="img_MouseOutHandler(event)" mouseOver="img_MouseOverHandler(event)"/>		
	</s:HGroup>
	
	<s:BorderContainer id="mask_BC" width="100%" top="28" borderVisible="false" bottom="0"/>
	
	<s:Label text="{this.title}" top="7" left="5"/>
	
	<s:BorderContainer borderVisible="false" mask="{mask_BC}" height="100%" 
					   width="100%" cornerRadius="5" top="23" backgroundColor="#FFFFFF" id="content_BC"/>

</s:BorderContainer>
