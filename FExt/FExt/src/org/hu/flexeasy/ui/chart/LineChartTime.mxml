<?xml version="1.0" encoding="utf-8"?>
<!--
	 @作者：HUBO
	 @创建时间：2011-12-26
	 @邮件：hubo.0508@gmail.com
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ns="library://FExt.HU" 
		 creationComplete="group1_creationCompleteHandler(event)"
		 height="200" xmlns:components="org.hu.flexeasy.components.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.hu.flexeasy.components.Container;
			import org.hu.flexeasy.components.RoundNode;
			
			import spark.components.Label;
			
			//历史颜色
			private var historyOfColor:uint;
			
			//周末工作日背景
			private var _weekendColor:uint = 0xF1F8FE;
			
			//鼠标移过后颜色
			private var _columnOverColor:uint = 0xF9DFE0;
			
			//Y轴color
			private var _YCalibrationColor:uint = 0xE6B261;
			
			//坐标
			private var basePoint:Point=new Point();
			
			//取值key
			private var _field:Array;
			
			//列宽
			private var _columnWidth:int = 16;
			
			//存储最大值与最小值
			private var numericalIdentification:Array;
			
			//是否周末
			private var weekendCount:int = 0;
			
			//y空闲高度
			private var yTop:int = 30;
			
			//x-axis scale
			private var yCalibrationNumber:int = 3;
			private var _yCalibrationValue:Array;
			
			//数据源
			private var data:ArrayCollection;
			
			//单位
			private var _unit:String = "";
			
			private var newTips:NewTips;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				this.contentGroup.clipAndEnableScrolling = true;
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				var numberOfColumns:Number = this.width/columnWidth;
				var finalColumns:int = int(numberOfColumns) == numberOfColumns ? numberOfColumns : Math.floor(numberOfColumns) + 1;
				
				this.createColumnsContainer(finalColumns);
				
				if(newTips == null)
				{
					newTips = new NewTips();
					newTips.includeInLayout = false;
					newTips.visible = false;

					var parent:UIComponent = this;
					var disylayObj:DisplayObject = 
						parent.parentApplication as DisplayObject == null 
						? 
						parent as DisplayObject : parent.parentApplication as DisplayObject;
					PopUpManager.addPopUp(newTips, disylayObj, false);
				}
			}
			
			public function dataProvider(data:ArrayCollection):void
			{
				this.data = data;
				
				this.draw(data);
			}
			
			private function createColumnsContainer(num:int):void
			{
				weekendCount = 0;
				for(var i:int=0; i<num; i++)
				{
					var contaier:Container;
					if(isWeekend()){
						contaier= this.createContainer(i.toString(),columnWidth,weekendColor);
					}else{
						contaier= this.createContainer(i.toString(),columnWidth);
					}				
					
					this.chartContainer.addElement(contaier);
				}
			}
			
			private function isWeekend():Boolean
			{
				weekendCount++;
				if(weekendCount == 6 || weekendCount == 7)
				{
					if(weekendCount == 7){
						weekendCount = 0
					}
					return true;
				}
				return false;
			}
			
			protected function draw(data:ArrayCollection):void
			{
				if(data == null || data.length == 0) return;
				
				this.chartLine.graphics.clear();
				this.chartRound.removeAllElements();
				
				this.numericalIdentification  = this.getMaximumAndMinimumValues(data);
				
				this.drawYCalibration();
				
				this.drawLine(data);
			}	
			
			private function drawLine(data:ArrayCollection):void
			{
				chartLine.graphics.lineStyle(2, 0x0066DD, 1,true, LineScaleMode.NORMAL, CapsStyle.NONE, JointStyle.MITER, 1);
				basePoint.x = columnWidth*0.5;
				
				var len:int=data.length;
				for(var i:int=0; i<len; i++)
				{					
					var item:Object = data.getItemAt(i);
					basePoint.y = this.getYAxisShowsValue(int(item[field[0]]));				
					
					this.drawRoundNode(i.toString());
					
					if(i==0){
						chartLine.graphics.moveTo(basePoint.x ,basePoint.y);
					}
					
					chartLine.graphics.lineTo(basePoint.x ,basePoint.y);
					
					basePoint.x  = basePoint.x+columnWidth;
				}
			}
			
			private function drawYCalibration():void
			{
				chartLine.graphics.lineStyle(1, YCalibrationColor, 1, false, LineScaleMode.VERTICAL, CapsStyle.NONE, JointStyle.MITER, 10);
//				var yw:Number = this.chartContainer.numElements*columnWidth;
				var yw:Number = this.width;
				if(this.yCalibrationValue && this.yCalibrationValue.length > 0)
				{
					var len:int = this.yCalibrationValue.length;
					for(var i:int=0; i<len; i++)
					{
						var yaxisValue:Number = this.getYAxisShowsValue(yCalibrationValue[i]);
						//chartLine.graphics.moveTo(0,yaxisValue);
						//chartLine.graphics.lineTo(yw,yaxisValue);
						this.drawBrokenLine(chartLine.graphics,0,yaxisValue,yw,yaxisValue);
						
						//var yaxis:Label = this.createLabel(Math.floor(yaxisValue).toString());
						var yaxis:Label = this.createLabel(unit+" "+yCalibrationValue[i].toString());
						yaxis.x = yw-getTextWidth(yaxis,yaxis.text)-3;
						yaxis.y = (yaxisValue+3)-getTextHeight(yaxis,yaxis.text);
						
						this.chartAxis.addElement(yaxis);
					}
				}
				else
				{
						
				}
			}
			
			private function getTextWidth(label:Label,text:String):int
			{
				label.regenerateStyleCache( false ); 
				var textMetrics:TextLineMetrics = label.measureText(text); 
				return textMetrics.width;
			}
			
			private function getTextHeight(label:Label,text:String):int
			{
				label.regenerateStyleCache( false ); 
				var textMetrics:TextLineMetrics = label.measureText(text); 
				return textMetrics.height;
			}
			
			private function drawRoundNode(index:String):void
			{
				var node:RoundNode = new RoundNode();
				node.x = basePoint.x-node.width*0.5;
				node.y = basePoint.y-node.width*0.5;
				node.id = index;
				node.name = MouseEvent.ROLL_OUT;
				
				this.chartRound.addElement(node);
			}
			
			public function drawBrokenLine(g:Graphics,fromX:Number,fromY:Number,toX:Number,toY:Number,solidLen:Number=5,brokenLen:Number=2):void  
			{  
				//如果间隔为0,直接画实线  
				if(brokenLen == 0 || solidLen == 0)  
				{  
					g.moveTo(fromX,fromY);  
					g.lineTo(toX,toY);  
					return;  
				}  
				//如果间隔不为0,画虚线  
				var xOffset:Number = toX - fromX;  
				var yOffset:Number = toY - fromY ;  
				//正切角度值  
				var atan:Number = Math.atan2(yOffset,xOffset);  
				//线的总长度  
				var totalLen:Number =Math.sqrt(Math.pow(xOffset,2)+Math.pow(yOffset,2));  
				//已经画线长度  
				var len:Number = 0;  
				//当前循环是否画实线  
				var isDrawSolid:Boolean = true;  
				var tempFX:Number = fromX;  
				var tempFY:Number = fromY;  
				while(totalLen>len)  
				{  
					len = isDrawSolid ? len + solidLen : len + brokenLen;  
					//利用三角函数,计算该段终点坐标  
					var tempTX:Number = Math.cos(atan)*len + fromX;  
					var tempTY:Number = Math.sin(atan)*len + fromY;  
					if(isDrawSolid)  
					{  
						g.moveTo(tempFX,tempFY);  
						g.lineTo(tempTX,tempTY);  
					}  
					isDrawSolid = !isDrawSolid;  
					tempFX = tempTX ;  
					tempFY = tempTY ;  
				}  				
			}  
			
			private function getYAxisShowsValue(value:int):Number
			{
				var maximum:int = int(numericalIdentification["maximum"]);
				var chartContainerH:Number = chartContainer.height-yTop;
				if(maximum < chartContainerH || maximum > chartContainerH)
				{					
					return chartContainerH-((chartContainerH/maximum)*value)+yTop;
				}	
				
				if(maximum == chartContainerH)
				{
					return value;
				}	
				
				return 0;
			}
			
			private function getMaximumAndMinimumValues(data:ArrayCollection):Array
			{
				var maximum:int = 0;
				var minimum:int  = 0;
				var len:int = data.length;
				for(var i:int=0; i<len; i++)
				{
					var item:Object = data.getItemAt(i);
					var num:int = int(item[field[0]]);
					
					maximum = maximum < num ? num : maximum;
					minimum = minimum < num ? minimum : num;
				}
				
				var arr:Array = [];
				arr["maximum"] = maximum;
				arr["minimum"] = minimum;
				
				return arr;
			}
			
			private function clearCacheColor(currentId:String):void
			{
				
//				var id:int = int(currentId);
//				id = id < 0 ? 0 : id;
//				var upColumnChart:Container = this.chartContainer.getElementAt(id) as Container;
//				if(upColumnChart.name == MouseEvent.ROLL_OVER)
//				{
//					upColumnChart.name = MouseEvent.ROLL_OUT;
//					upColumnChart.backgroupColor = getBgColor(id+1);
//					upColumnChart.invalidateDisplayList();
//				}
				
				var len:int = this.chartContainer.numElements;
				for(var i:int=0; i<len; i++)
				{
					var obj:Object = Object(chartContainer.getElementAt(i));
					if(obj.name == MouseEvent.ROLL_OVER)
					{
						obj.name = MouseEvent.ROLL_OUT;
						trace("obj.id = " + obj.id);
						obj.backgroupColor = getBgColor(i+1);
						obj.invalidateDisplayList();
					}
				}
			}
			
			private function clearRoundCacheColor(currentId:String):void
			{			
				var len:int = this.chartRound.numElements;
				for(var i:int=0; i<len; i++)
				{
					var obj:Object = Object(chartContainer.getElementAt(i));
					if(obj.name == MouseEvent.ROLL_OVER)
					{
						obj.name = MouseEvent.ROLL_OUT;
						obj.solidColor = 0x0066DD;
						obj.contentColor = 0xFFFFFF;
					}
				}
			}
			
			private function getBgColor(value:int):uint
			{
				while(true){
					if(value <= 7)
					{
						break;
					}
					value = value-7;					
				}
				if(6== value ||  value == 7){
					return weekendColor;
				}
				
				return 0xFFFFFF;
			}
			
			protected function chartColumnRollHandler(event:MouseEvent):void
			{					
				var column:Container = event.currentTarget as Container;		
				var columnId:int = int(column.id);
				var targetId:String = Object(event.relatedObject).id;
				//trace(event.type+" | " + targetId+" | column.id "+column.id);				
					
				//
				if(targetId == "chartLine" || targetId == "chartRound" || targetId == "chartAxis")
				{
					return;
				}else{
					this.clearCacheColor(column.id);
				}											
				//trace("++++++++++++++++++执行++++++++++++++++++++");
				
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT:							
						column.backgroupColor = this.getBgColor(columnId+1);		
						column.name  = MouseEvent.ROLL_OUT;
						
						this.newTipsVisible(int(column.id),false);
						break;
					
					case MouseEvent.ROLL_OVER:
						column.backgroupColor = columnOverColor;		
						column.name = MouseEvent.ROLL_OVER;
						
						this.newTipsVisible(int(column.id),true);
						break;
					
					default:
						break;
				}
				column.invalidateDisplayList();					
				this.changeRoundStyle(int(column.id),event.type);		
			}	
			
			private function newTipsVisible(index:int,value:Boolean):void
			{
				var point:Point = getNewTipsPoint(index);
				var item:Object = this.data.getItemAt(index);
				var absolutePosition:Point = this.getUiAbsolutePosition(this);
				if(value)
				{
					this.newTips.visible = true;
					newTips.x = point.x+newTips.width*0.5+columnWidth*0.5+3;
					newTips.y = point.y+newTips.height+10;	
					newTips.time = item[field[1]]+" "+item[field[2]];
					newTips.price =  this.unit+item[field[0]];
				}
				else
				{
			
				}
			}
						
			private function getNewTipsPoint(index:int):Point
			{
				var targetRound:IVisualElement = this.chartRound.getElementAt(index);
				this.basePoint.x = targetRound.x;
				this.basePoint.y = targetRound.y;
				
				return this.basePoint;
			}
			
			public function getUiAbsolutePosition(ui:UIComponent):Point
			{
				var point:Point=new Point();
				point.x=ui.x;
				point.y=ui.y;
				var temp:DisplayObject=ui;
				do
				{
					var parent:DisplayObject=temp.parent;
					if(parent == null)
					{
						break;	
					}
					point.x+=parent.x;
					point.y+=parent.y;
					temp=parent;
					
				} while (parent !== ui.parentApplication)
				
				return point;
			}

			protected function changeRoundStyle(index:int, type:String):void
			{
				var roundNode:RoundNode = this.chartRound.getElementAt(index) as RoundNode;
				switch(type)
				{
					case MouseEvent.ROLL_OUT:
						roundNode.name = MouseEvent.ROLL_OUT;
						roundNode.solidColor = 0x0066DD;
						roundNode.contentColor = 0xFFFFFF;
						break;
					
					case MouseEvent.ROLL_OVER:					
						roundNode.name = MouseEvent.ROLL_OVER;
						roundNode.solidColor = 0xFFFFFF;
						roundNode.contentColor = 0x0066DD;
						break;
					
					default:
						break;
				}
			}
			
			private function createContainer(index:String,width:Number,backgroupColor:uint = 0xFFFFFF):Container
			{				
				var container:Container = new Container();
				container.addEventListener(MouseEvent.ROLL_OVER,chartColumnRollHandler,false,0,true);
				container.addEventListener(MouseEvent.ROLL_OUT,chartColumnRollHandler,false,0,true);
				container.addEventListener(flash.events.FocusEvent.FOCUS_OUT,chartColumnFocusHandler,false,0,true);
				if(index == "0"){
					container.borderSides = "";
				}else{
					container.borderSides = "left";
				}				
				container.percentHeight=100;
				container.width = width;				
				container.backgroupColor = backgroupColor;
				container.id = index;
				container.name = MouseEvent.ROLL_OUT;
				
				return container;
			}
			
			private function createLabel(text:String):Label
			{
				var label:Label = new Label();
				label.text = text;
				
				return label;
			}
			
			protected function chartColumnFocusHandler(event:FocusEvent):void
			{

			}

			public function get field():Array
			{
				return _field;
			}

			public function set field(value:Array):void
			{
				_field = value;
			}

			public function get yCalibrationValue():Array
			{
				return _yCalibrationValue;
			}

			public function set yCalibrationValue(value:Array):void
			{
				_yCalibrationValue = value;
			}

			public function get unit():String
			{
				return _unit;
			}

			public function set unit(value:String):void
			{
				_unit = value;
			}

			public function get columnWidth():int
			{
				return _columnWidth;
			}

			public function set columnWidth(value:int):void
			{
				_columnWidth = value;
			}

			public function get YCalibrationColor():uint
			{
				return _YCalibrationColor;
			}

			public function set YCalibrationColor(value:uint):void
			{
				_YCalibrationColor = value;
			}

			public function get columnOverColor():uint
			{
				return _columnOverColor;
			}

			public function set columnOverColor(value:uint):void
			{
				_columnOverColor = value;
			}

			public function get weekendColor():uint
			{
				return _weekendColor;
			}

			public function set weekendColor(value:uint):void
			{
				_weekendColor = value;
			}


		]]>
	</fx:Script>

	<components:HContainer id="chartContainer"  height="100%" gap="0"   borderSides=""/>	
	<s:Group id="chartLine" height="{chartContainer.height}" width="{chartContainer.width}"   />	
	<s:Group id="chartRound" height="{chartContainer.height}" width="{chartContainer.width}"   />
	<s:Group id="chartAxis" height="{chartContainer.height}" width="{chartContainer.width}"   />
	
</s:BorderContainer>
