<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:login="com.biiway.stockassistant.view.login.*"
		 xmlns:navigation="com.biiway.stockassistant.view.navigation.*"
		 xmlns:components="com.biiway.stockassistant.components.*"
		 xmlns:selectedstock="com.biiway.stockassistant.view.selectedstock.*" creationComplete="creationCompleteHandler(event)"
		 width="{Const.LOGIN_MEASURE[0]}"
		 height="{Const.LOGIN_MEASURE[1]}">
	
	<fx:Script>
		<![CDATA[
			import com.biiway.stockassistant.event.LoginEvent;
			import com.biiway.stockassistant.event.MenuEvent;
			import com.biiway.stockassistant.util.Const;
			import com.biiway.stockassistant.view.navigation.Navigation;
			import com.biiway.stockassistant.view.selectedstock.SelectedStock;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.WindowedApplication;
			
			///////////////////////////////////////////////////////////////////////////////////////////
			//++以下代码需要开发者实现与后台交互++//
			///////////////////////////////////////////////////////////////////////////////////////////
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
//				navigation.message("xxxxxxxxxxx");
//				display();
			}
			
			/**
			 * 点击“登录”按钮触发。
			 * 
			 * 1、消息提示参见：Login.message()；
			 * 2、在登录时，需要从数据库中判断用户名与密码是否正确，应该调用<code>Login.message("正在登录，请稍后！",true)</code>函数进行友好提示。
			 * 3、在demo中，未实现登录友好提示功能；
			 * 4、登录友好提示未做效果，只是简单的文字提示。
			 * 
			 * @param LoginEvent.username 登录用户名
			 * @param LoginEvent.password 登录密码
			 * 
			 * @see com.biiway.stockassistant.view.login.Login.message()
			 */
			protected function loginHandler(event:LoginEvent):void
			{
				if("admin" == event.username && "123" == event.password)
				{
					navigation.message(event.username);
					//login.message("正确！",true);
					display();
				}
				else
				{
					login.message("错误！",false);
				}
			}
			
			/**
			 * 用户点击“注销”按钮时，需要实现某些业务规则，请在本函数实现
			 */
			public function logoutOperational():void
			{
			
			}
			
			/**
			 * 用户点击菜单时，需要实现某些业务规则，请在本函数实现
			 * 
			 * @param text:String 当前菜单项显示名称
			 * @param data:Object 当前菜单项整个数据对象源
			 */
			public function menuOperational(text:String, data:Object):void
			{
				
			}
			
			///////////////////////////////////////////////////////////////////////////////////////////
			//++以下代码开发者不需要关心++//
			///////////////////////////////////////////////////////////////////////////////////////////
			
			protected function menuEventHandler(event:MenuEvent):void
			{
				menuOperational(event.text, event.data);
				
				switch(event.data["type"])
				{
					case "selectedstock" :
						var selectedStock:SelectedStock = new SelectedStock();
						
						content.addElement(selectedStock);
						break;
					
					case "incomeanalysis" :
						break;
					
					case "member" :
						break;
					
					case "help" :
						break;
					
					default:
						break;
				}
			}
			
			protected function logoutEventHandler(event:Event):void
			{
				logoutOperational();
				display(false);
			}
			
			private function display(mark:Boolean = true):void
			{
				if(mark)
				{
					login.visible = false;
					navigationContent.visible = true;
					
					this.width  == Const.CONTENT_MEASURE[0] ? null : width  = Const.CONTENT_MEASURE[0];
					this.height == Const.CONTENT_MEASURE[1] ? null : height = Const.CONTENT_MEASURE[1];
				}
				else
				{
					login.visible = true;
					navigationContent.visible = false;
					
					this.width  == Const.LOGIN_MEASURE[0] ? null : width  = Const.LOGIN_MEASURE[0];
					this.height == Const.LOGIN_MEASURE[1] ? null : height = Const.LOGIN_MEASURE[1];
				}
				
				updateWindowedApplicationScale();
			}
			
			private function updateWindowedApplicationScale():void
			{
				var app:WindowedApplication = parentApplication as WindowedApplication;
				
				app.maxWidth = Capabilities.screenResolutionX;
				app.maxHeight = Capabilities.screenResolutionY;
				
				app.width  == this.width  ? null : app.width  = this.width;
				app.height == this.height ? null : app.height = this.height;
				
				(app as Object).windowCentered();
			}
			
		
			
		]]>
	</fx:Script>
	
	<login:Login id="login" loginEvent="loginHandler(event)"/>
	
	<navigation:NavigationContent id="navigationContent">
		<navigation:ContentDropShadow/>
		<navigation:Navigation id="navigation" logoutEvent="logoutEventHandler(event)" menuEvent="menuEventHandler(event)">
			<navigation:menudata>
				<fx:Array>
					<fx:Object type="selectedstock" text="选股" selected="true"/>
					<fx:Object type="incomeanalysis" text="收益分析"/>
					<fx:Object type="member" text="会员管理"/>
					<fx:Object type="help" text="帮助"/>
				</fx:Array>
			</navigation:menudata>
		</navigation:Navigation>
		<navigation:ChildrenContent id="content"/>
	</navigation:NavigationContent>
	
</s:Group>
