<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-10</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.printingoffice.components.*"
					  xmlns:graphic="com.printingoffice.components.graphic.*"
					  xmlns:comview="com.printingoffice.view.components.*"
					  creationComplete="creationCompleteHandler(event)"
					  top="115"
					  left="0"
					  width="200"
					  height="100%">
	
	<fx:Script>
		<![CDATA[
			import assets.skin.ClickBtnSkin;
			
			import com.printingoffice.components.TooTip;
			import com.printingoffice.event.MenuEvent;
			import com.printingoffice.util.IconConst;
			import com.printingoffice.util.UIUtil;
			import com.printingoffice.view.components.MenuThemes;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Button;
			import spark.components.Group;
			import spark.components.supportClasses.SkinnableComponent;
			
			/**
			 * 模块菜单切换列表窗体
			 */
			private var chooseMenuThemes:MenuThemes;
			
			/**
			 * 提示消息容器
			 */
			private var tootip:TooTip;
			
			/**
			 * 菜单数据源
			 */
			private var _menuData:ArrayCollection;
			
			private var _dataField:String = "text";
			
			private var redColor:uint = 0xDD4B39;
			
			private var defaultColor:uint = 0x222222;
			
			///////常量/////////
			
			public static const QUICK_ENTRANCE:String = "quickEntrance";
			
			public static const DETAILED_MENU:String = "detailedMenu";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
			
			}

			/**
			 * <p>点击当前菜单(菜单文字)外部容器，显示模块菜单切换列表窗体</p>
			 * 
			 * 注：创建与使用[模块切换窗体]缓存侧略，[模块切换窗体]只在第一次初始时创建，当第二调用或显示[模块切换窗体]时，不再初始化，直接使用缓存。
			 */
			protected function menuThemes_clickHandler(event:MouseEvent):void
			{
				this.initMenu();
				
				PopUpManager.addPopUp(chooseMenuThemes, UIUtil.getApplication(this), false);				
			}
			
			public function initMenu():void
			{
				if(chooseMenuThemes == null)
				{
					chooseMenuThemes = new MenuThemes();
					chooseMenuThemes.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE,mouseDownOutsideHandler,false,0,true);
					//chooseMenuThemes.addEventListener(MenuThemes.CLICK_EVENT,chooseTypeClickHandler,false,0,true);
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					chooseMenuThemes.x = point.x;
					chooseMenuThemes.y = point.y + menuThemes.height + 2;
					
					chooseMenuThemes.initMenuItem(menuData);					
				}
				
				initChildrenMenu();
			}
			
//			protected function chooseTypeClickHandler(event:DynamicEvent):void
//			{
////				var selectItem:Object = event.data;
////				menuValue.text = selectItem.type;
//				
//				PopUpManager.removePopUp(chooseMenuThemes);
//			}
			
			protected function mouseDownOutsideHandler(event:Event):void
			{				
				initChildrenMenu();
				PopUpManager.removePopUp(chooseMenuThemes);
			}
			
			public function initChildrenMenu():void
			{
				var notSelected:Array = chooseMenuThemes.getNotSelected();
				var selected:Array = chooseMenuThemes.getSelected();
				
				this.removeNotSelectedMenu(notSelected);
				this.addSelectedMenu(selected);
			}
			
			/**
			 * <p>创建与显示菜单子项(二级菜单)</p>
			 * 
			 * 创建前判断当前菜单子项是否已创建，如已创建则本次无需创建，只需根据索引位置更新显示索引
			 */
			protected function addSelectedMenu(selected:Array):void
			{
				var len:int = selected.length;
				for(var i:int=0; i<len; i++)
				{
					var item:Object = menuData.getItemAt(int(selected[i]));
					
					var moduleName:String = item[dataField];
					
					if(isMenuAlreadyExists(moduleName) == false)
					{
						var childrenItem:ArrayCollection = item["childrenMenu"] as ArrayCollection;
						
						var detailedMenu:SkinnableContainer = this.createSkinMenuContainer(selected[i],moduleName);
						detailedMenu.addElement(createChildrenMenu(childrenItem));
						
						menuSource.addElement(detailedMenu);				
					}					
				}				
			}
			
			private function createChildrenMenu(data:ArrayCollection):MenuBar
			{
				var menuBar:MenuBar = new MenuBar();
				menuBar.initMenuButton(data);
				menuBar.top = 27;
			
				return menuBar;
			}
			
			protected function removeNotSelectedMenu(notSelected:Array):void
			{
				var len:int = notSelected.length;				
				for(var i:int=0; i<len; i++)
				{
					var currMenuId:String = notSelected[i].toString();
					var num:int = menuSource.numElements;
					for(var k:int=0; k<num; k++)
					{
						var ele:IVisualElement = menuSource.getElementAt(k);
						if(UIUtil.getName(ele) == DETAILED_MENU && UIUtil.getID(ele) == currMenuId)
						{
							menuSource.removeElement(ele);
							break;
						}
					}
				}	
			}

			private function createSkinMenuContainer(index:int,moduleName:String):SkinnableContainer
			{
				var skinCon:SkinnableContainer = new SkinnableContainer();
				skinCon.name = DETAILED_MENU;
				skinCon.id = index.toString();
				skinCon.percentWidth = 100;
				
				var line:Line = new Line();
				line.top=0;
				line.left = 28;
				line.right = 20;
				line.percentWidth = 100;
				
				var label:Label = new Label();
				label.text = moduleName;
				label.setStyle("color",redColor);
				label.left = 33;
				label.top = 8;
				//label.setStyle("fontWeight","bold");
				label.setStyle("fontSize",12);
				
				skinCon.addElement(line);
				skinCon.addElement(label);
				
				return skinCon;
			}
			
			/**
			 * 根据一级菜单名称查找是否已在菜单容器里
			 */
			private function isMenuAlreadyExists(value:String):Boolean
			{
				var returnValue:Boolean = false;
				
				var len:int = menuSource.numElements;
				for(var i:int=0; i<len; i++)
				{
					var ele:Object  = menuSource.getElementAt(i);					
					if(UIUtil.getName(ele) == DETAILED_MENU)
					{
						var label:Label = ele.getElementAt(1) as Label;
						if(label && label.text == value)
						{
							returnValue = true;
							break;
						}					
					}
				}
				
				return returnValue;
			}

			/**
			 * <p>鼠标移过当前菜单(菜单文字)容器上时，显示提示窗体</p>
			 */
			protected function menuThemes_rollHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER:							
						this.showTootip(true);
						break;
					
					case MouseEvent.ROLL_OUT :
						this.showTootip(false);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * <p>鼠标移过当前菜单(菜单文字)容器上时，显示提示窗体</p>
			 * 
			 * 注：</br>
			 * 1、创建与使用[提提示窗体]缓存侧略，[提示窗体]只在第一次初始时创建，当第二调用或显示[提示窗体]时，不再初始化，直接使用缓存。</br>
			 * 2、当第一次创建[提提示窗体]时，宽度暂时不能确定，宽度定死为64，容后再解决此问题。
			 */
			private function showTootip(value:Boolean):void
			{
				if (value)
				{
					if (tootip == null)
					{
						tootip = new TooTip("切换模块");
					} 
					
					var tootipwidth:Number = tootip.width;
					tootipwidth = tootipwidth == 0 ? 64*0.5 : tootipwidth * 0.5
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					tootip.x = (point.x + menuThemes.width*0.5) - tootipwidth;
					tootip.y = point.y + menuThemes.height+10; 
					
					PopUpManager.addPopUp(tootip, UIUtil.getApplication(this), false);
				}
				else
				{
					if (tootip)
					{
						PopUpManager.removePopUp(tootip);
					}
				}
			}

			/**
			 * 初始化用户常用菜单
			 */
			public function initCommonlyUsedMenu(data:ArrayCollection):void
			{
				commonlyUsedMenu.initMenuButton(data);
			}
			
			/**
			 * 初妈化用户快捷功能菜单入口
			 */
			public function initQuickEntranceBtn(data:Array):void
			{
				var btn:spark.components.Button = new spark.components.Button();
				btn.left = 33;
				btn.height = 29;
				btn.width = 115;
				btn.label = data[0];
				btn.setStyle("color",0xFFFFFF);
				btn.setStyle("fontSize",15);
				btn.setStyle("skinClass",Class(ClickBtnSkin));
				btn.name = data[1];
				btn.useHandCursor = true;
				btn.buttonMode = true;
				btn.addEventListener(MouseEvent.CLICK,quickEntranceMenuHanler,false,0,true);
				
				if(quickEntrance.numElements > 0)
				{
					quickEntrance.removeAllElements();
				}
				quickEntrance.addElement(btn);
			}
	
			/**
			 * 点击常用功能快捷入口触发
			 */
			protected function quickEntranceMenuHanler(event:MouseEvent):void
			{
				var btn:spark.components.Button = event.currentTarget as spark.components.Button;
				this.dispatch(btn.name);
			}
			
			/**
			 * 派发菜单事件
			 * 
			 * @param url:String 路径
			 * @param data:Object 传递值
			 */
			public function dispatch(url:String, data:Object = null):void
			{
				var menuEvent:MenuEvent = new MenuEvent(MenuEvent.MENU_EVENT);
				menuEvent.url = url;
				menuEvent.data = data;
				
				this.dispatchEvent(menuEvent);
			}

			public function get menuData():ArrayCollection
			{
				return _menuData;
			}

			public function set menuData(value:ArrayCollection):void
			{
				_menuData = value;
			}

			public function get dataField():String
			{
				return _dataField;
			}

			public function set dataField(value:String):void
			{
				_dataField = value;
			}

			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="menuEvent",type="com.printingoffice.event.MenuEvent")]
	</fx:Metadata>
	
	<!--模块菜单的切换-->
	<s:HGroup id="menuThemes"   verticalAlign="middle" useHandCursor="true" buttonMode="true"  y="26" x="20"
			  click="menuThemes_clickHandler(event)" rollOut="menuThemes_rollHandler(event)" rollOver="menuThemes_rollHandler(event)">
		<s:Label id="menuValue" text="功能菜单"  color="#FF2222" fontSize="18"/>
		<graphic:Triangle rollMask="true" originalColor="#DD4B39" overColor="#D52F1B"/>
	</s:HGroup>
	
	<components:Line/>
	
	<!--根据每个不同角色，从数据库查询资源，创建角色菜单-->
	<s:SkinnableContainer id="menuSource"  top="80" width="100%" height="100%">
		
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<!--常用功能快捷入口-->
		<s:SkinnableContainer id="quickEntrance" width="100%" />			
		
		<!--自定义常用功能-->
		<comview:MenuBar id="commonlyUsedMenu"/>
		
		<!--
		<s:SkinnableContainer width="100%">
			<components:Line top="0" left="28" right="20"/>
			<s:Label text="CAD出图" color="0xDD4B39" left="33" top="8" fontWeight="bold" fontSize="14"/>
		</s:SkinnableContainer>
		-->
		
	</s:SkinnableContainer>
	
</s:SkinnableContainer>
