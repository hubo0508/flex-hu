<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-18</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:datagrid="com.printingoffice.framework.components.datagrid.*"
		  gap="0"
		  width="100%">

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.components.VGroup;

			private var _dataProvider:ArrayCollection;
			
			private var _displayColumn:Array;

			private var _displayColumnWidth:Array;
			
			private var _selectedColor:uint = 0xF17B7B;
			
			private var _defaultColor:uint = 0xFFFFFF;
			
			private var _overColor:uint = 0xF3F3F3;
			
			private var borderColor:uint=0xE7E5E5;

			override protected function createChildren():void
			{
				super.createChildren();

				this.initColumn();
			}
			
			private function initColumn():void
			{
				if (displayColumn == null || displayColumn.length == 0)
					return;

				var len:int=displayColumn.length;
				for (var i:int=0; i < len; i++)
				{
					var vgroup:VGroup=new VGroup();
					vgroup.name=displayColumn[i];
					vgroup.gap=1;
					
					var columnWidth:int=int(displayColumnWidth[i]);
					if (columnWidth == 0)
					{
						vgroup.percentWidth=100;
					}
					else
					{
						vgroup.width = columnWidth;
					}

					this.addElement(vgroup);
				}
			}
			
			/**
			 * 将数据源添加到每列中
			 */
			protected function dataToColumns():void
			{
				var len:int=dataProvider.length;
				for (var i:int=0; i < len; i++)
				{
					var item:Object = dataProvider.getItemAt(i);
					this.displayDataToCell(item,i);
				}
			}
			
			private function displayDataToCell(item:Object, rowIndex:int):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					if(column && column.name != Cell.BOX)
					{
						var cell:Cell = column.getElementAt(rowIndex) as Cell;
						if(cell && cell.labelOrBox == Cell.LABEL)
						{
							cell.text = item[column.name];
						}
					}
				}
			}

			private function initOrDelCellContainerl():void
			{
				if (dataProvider == null || dataProvider.length == 0)
					return;

				var len:int=dataProvider.length;
				var firstColumnRows:int=getFirstColumnRows();

				var initMark:Boolean = false;
				if (firstColumnRows == 0)
				{
					createCellContainer();
					initMark = true;
				}
				
				if(firstColumnRows > len)
				{
					removeCellContainer(firstColumnRows - len);
				}
				
				if(!initMark && firstColumnRows < len)
				{
					additionalCellContainer(len - firstColumnRows);
				}
				
				clearSelectedOrValue();
			}
			
			private function clearSelectedOrValue():void
			{
				var rows:int = getFirstColumnRows();
				
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					for(var k:int=0; k<rows; k++)
					{
						var cell:Cell = column.getElementAt(i) as Cell;
						cell.clearSelectedOrValue();
					}
				}
			}
			
			private function additionalCellContainer(additionalNum:int):void
			{
				var rows:int = this.getFirstColumnRows();
				
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					for(var k:int=0; k<additionalNum; k++)
					{
						column.addElement(getCell(column.name, rows+k));
					}
				}
			}
			
			private function removeCellContainer(removeRows:int):void
			{
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					for(var k:int=0; k<removeRows; k++)
					{
						column.removeElementAt(k);
					}
				}
			}

			private function createCellContainer():void
			{
				var len:int=dataProvider.length;
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					for (var k:int=0; k < len; k++)
					{
						column.addElement(getCell(column.name, k));
					}
				}
			}

			public function getCell(type:String,rowsIndex:int):Cell
			{
				var cell:Cell=new Cell();
				cell.labelOrBox= type == Cell.BOX ? Cell.BOX : Cell.LABEL;
				cell.percentWidth=100;
				cell.addEventListener(MouseEvent.ROLL_OUT,cellRollHandler,false,0,true);
				cell.addEventListener(MouseEvent.ROLL_OVER,cellRollHandler,false,0,true);
				cell.id = rowsIndex.toString();
//				cell.useHandCursor = true;
//				cell.buttonMode = true; 
				
				return cell;
			}
			
			protected function cellRollHandler(event:MouseEvent):void
			{
				var cell:Cell = event.currentTarget as Cell;
				changeBgColor(int(cell.id),event.type);
			}
			
			public function changeBgColor(rowsIndex:int, type:String):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					var targetCell:Cell = column.getElementAt(rowsIndex) as Cell;
					if(targetCell)
					{
						if(type == MouseEvent.ROLL_OUT)
						{
							targetCell.backgroupColor = targetCell.constColor;
							targetCell.invalidateDisplayList();
						}
						if(type == MouseEvent.ROLL_OVER)
						{
							targetCell.backgroupColor = overColor;
							targetCell.invalidateDisplayList();
						}
					}
				}
			}

			private function getFirstColumnRows():int
			{
				var firstColumn:VGroup=this.getElementAt(0) as VGroup;

				return firstColumn.numElements;
			}

			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider=value;

				initOrDelCellContainerl();
				dataToColumns();
			}

			/**
			 * 鼠标移到单元格上颜色(0xF9F9DD)
			 */
			public function get overColor():uint
			{
				return _overColor;
			}

			/**
			 * @private
			 */
			public function set overColor(value:uint):void
			{
				_overColor = value;
			}

			/**
			 * 单元格默认颜色(0xFFFFFF)
			 */
			public function get defaultColor():uint
			{
				return _defaultColor;
			}

			/**
			 * @private
			 */
			public function set defaultColor(value:uint):void
			{
				_defaultColor = value;
			}

			/**
			 * 单元格选中颜色(0xF17B7B)
			 */
			public function get selectedColor():uint
			{
				return _selectedColor;
			}

			/**
			 * @private
			 */
			public function set selectedColor(value:uint):void
			{
				_selectedColor = value;
			}

			/**
			 * 显示列数字段
			 */
			public function get displayColumn():Array
			{
				return _displayColumn;
			}

			/**
			 * @private
			 */
			public function set displayColumn(value:Array):void
			{
				_displayColumn = value;
			}

			/**
			 * 显示列数字段完度</br>
			 * 如为0则表示为100% 宽度
			 */
			public function get displayColumnWidth():Array
			{
				return _displayColumnWidth;
			}

			/**
			 * @private
			 */
			public function set displayColumnWidth(value:Array):void
			{
				_displayColumnWidth = value;
			}


		]]>
	</fx:Script>

</s:HGroup>
