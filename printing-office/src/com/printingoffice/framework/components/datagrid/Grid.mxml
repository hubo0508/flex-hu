<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-18</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:datagrid="com.printingoffice.framework.components.datagrid.*"
		  gap="0"
		  width="100%">

	<fx:Script>
		<![CDATA[
			import com.printingoffice.framework.components.graphic.CurrentLinePrompt;
			import com.printingoffice.framework.core.TweenLite;
			import com.printingoffice.framework.util.Const;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DynamicEvent;
			
			import spark.components.CheckBox;
			import spark.components.VGroup;

			private var _dataProvider:ArrayCollection;
			
			private var _displayColumn:Array;

			private var _displayColumnWidth:Array;
			
			private var _selectedColor:uint = 0xFFFFCC;
			
			private var _defaultColor:uint = 0xFFFFFF;
			//0xF3F3F3
			private var _unfinishedColor:uint = 0xF3F3F3;
			
			private static const SELECTED:String = "selected";
			
			private var currentLinePrompt:CurrentLinePrompt;
			
			private var _cellHeight:int = 42;
			
			private var _bgColorField:String = "bgColorStatus";
			
			private var _selectedItem:Array;
			
			/**
			 * 容器内部使用，存储选择行的索引值
			 */
			private var selectedRowsIndex:Array;
			
			/**
			 * <p>继续父组件createChildren()函数</p>
			 * 
			 * 1、根据属性displayColumn个数初始化列数。</br>
			 * 2、初始化当前行状态容器。</br>
			 * 
			 * @see com.printingoffice.framework.components.graphic.CurrentLinePrompt
			 */
			override protected function createChildren():void
			{
				super.createChildren();

				this.initColumn();
				
				if(!currentLinePrompt)
				{
					currentLinePrompt = new CurrentLinePrompt();
					currentLinePrompt.visible = false;
					currentLinePrompt.includeInLayout = false;
					
					this.addElement(currentLinePrompt);
				}
			}
			
			/**
			 * <p>根据属性值displayColumn的长度初始列数</p>
			 */
			protected function initColumn():void
			{
				if (displayColumn == null || displayColumn.length == 0)
					return;

				var len:int=displayColumn.length;
				for (var i:int=0; i < len; i++)
				{
					var vgroup:VGroup=new VGroup();
					vgroup.name=displayColumn[i];
					vgroup.gap=0;
					
					var columnWidth:int=int(displayColumnWidth[i]);
					if (columnWidth == 0)
					{
						vgroup.percentWidth=100;
					}
					else
					{
						vgroup.width = columnWidth;
					}

					this.addElement(vgroup);
				}
			}
			
			/**
			 * 将数据源添加到每个单元格中
			 */
			protected function dataToColumns():void
			{
				var len:int=dataProvider.length;
				for (var i:int=0; i < len; i++)
				{
					var item:Object = dataProvider.getItemAt(i);
					this.displayDataToCell(item,i);
				}
			}
			
			/**
			 * <p>将数据以行【item】的形式添加到指定行【rowIndex】的每个单元格中</p>
			 * 
			 * 注：</br>
			 * 1、单元格背景颜色默认为白色。当行数据源中定义有动态属性【bgColorField】的值时，其值等于0时，填充颜色为动态属性【unfinishedColor】的值，则为白色。</br>
			 * 2、本容器的背景颜色填充封装过于简单，根据该软件业务来进行的简单判断。如要做成通用，应在取背景颜色值由开发人员自己定义业务规则。</br>
			 * 3、若要通用，请更改此处代码：if((cell.labelOrBox == Cell.LABEL || cell.labelOrBox == Cell.BOX) && item[bgColorField].toString() == "0")
			 * 
			 * @param item:Object 行数据
			 * @param rowIndex:int 行索引
			 */
			protected function displayDataToCell(item:Object, rowIndex:int):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					if(column)
					{
						var cell:Cell = column.getElementAt(rowIndex) as Cell;
						if(cell)
						{
							if(cell.labelOrBox == Cell.LABEL)
							{
								cell.text = item[column.name];
							}
							
							try
							{
								if((cell.labelOrBox == Cell.LABEL || cell.labelOrBox == Cell.BOX) && item[bgColorField].toString() == "0")
								{
									cell.backgroupColor = unfinishedColor;
									cell.constColor = unfinishedColor;
								}
							}catch(e:*){
								trace(e);
							}							
						}
					}					
				}
			}
		
			/**
			 * 
			 */
			protected function initOrDelCellContainerl():void
			{
				if (dataProvider == null || dataProvider.length == 0)
					return;

				var len:int=dataProvider.length;
				var firstColumnRows:int=getFirstColumnRows();

				var initMark:Boolean = false;
				if (firstColumnRows == 0)
				{
					createCellContainer();
					initMark = true;
				}
				
				if(firstColumnRows > len)
				{
					removeCellContainer(firstColumnRows - len);
				}
				
				if(!initMark && firstColumnRows < len)
				{
					additionalCellContainer(len - firstColumnRows);
				}
				
				clearSelectedOrValue();
			}
			
			private function clearSelectedOrValue():void
			{
				var rows:int = getFirstColumnRows();
				
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					if(column)
					{
						for(var k:int=0; k<rows; k++)
						{
							var cell:Cell = column.getElementAt(i) as Cell;
							cell.clearSelectedOrValue();
							cell.backgroupColor = defaultColor;
							cell.constColor = defaultColor;
							cell.invalidateDisplayList();
						}
					}
				}
			}
			
			private function additionalCellContainer(additionalNum:int):void
			{
				var rows:int = this.getFirstColumnRows();
				
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					if(column)
					{
						for(var k:int=0; k<additionalNum; k++)
						{
							column.addElement(getCell(column.name, rows+k));
						}
					}
				}
			}
			
			private function removeCellContainer(removeRows:int):void
			{
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					if(column)
					{
						for(var k:int=0; k<removeRows; k++)
						{
							column.removeElementAt(k);
						}
					}					
				}
			}

			private function createCellContainer():void
			{
				var len:int=dataProvider.length;
				var num:int=this.numElements;
				for (var i:int=0; i < num; i++)
				{
					var column:VGroup=this.getElementAt(i) as VGroup;
					if(column)
					{
						for (var k:int=0; k < len; k++)
						{
							column.addElement(getCell(column.name, k));
						}
					}
				}
			}

			public function getCell(type:String,rowsIndex:int):Cell
			{
				var cell:Cell=new Cell();
				cell.labelOrBox= type == Cell.BOX ? Cell.BOX : Cell.LABEL;
				cell.percentWidth=100;
				cell.id = rowsIndex.toString();				
				cell.backgroupColor = defaultColor;
				cell.constColor = defaultColor;
				cell.addEventListener(MouseEvent.ROLL_OUT,cellRollHandler,false,0,true);
				cell.addEventListener(MouseEvent.ROLL_OVER,cellRollHandler,false,0,true);
				cell.addEventListener(Cell.BOX_CLICK,boxClickHandler,false,0,true);
				
				if(cell.labelOrBox == Cell.BOX)
				{
					cell.addEventListener(MouseEvent.CLICK,boxCellClickHandler,false,0,true);
				}
				
				return cell;
			}
			
			protected function boxCellClickHandler(event:MouseEvent):void
			{
				if(event.target is CheckBox)return;
				
				var cell:Cell = event.currentTarget as Cell;
				var box:CheckBox = cell.getElementAt(0) as CheckBox;
				
				box.selected = !box.selected;
				
				var rowsIndex:int = int(cell.id);
				if(box.selected)
				{
					changeBgColor(int(rowsIndex), SELECTED);
				}
				else
				{
					changeBgColor(int(rowsIndex), MouseEvent.ROLL_OUT);					
				}
			}
			
			/**
			 * 点击行前复选框，
			 */
			protected function boxClickHandler(dye:DynamicEvent):void
			{
				var selected:Boolean = Boolean(dye.selected);
				var rowsIndex:int = int(dye.rowsIndex);
				
				if(selected)
				{
					changeBgColor(rowsIndex, SELECTED);
				}
				else
				{
					changeBgColor(rowsIndex, MouseEvent.ROLL_OUT);					
				}
			}
			
			protected function cellRollHandler(event:MouseEvent):void
			{
				var cell:Cell = event.currentTarget as Cell;
				
				changeCurrentLinePrompt(int(cell.id),event.type);
				
				changeTextColor(int(cell.id),event.type);
			}
			
			public function changeTextColor(rowsIndex:int, type:String):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					if(column && column.name != Cell.BOX)
					{
						var cell:Cell = column.getElementAt(rowsIndex) as Cell;
						switch(type)
						{
							case MouseEvent.ROLL_OUT :
								cell.textColor = Const.BLACK_COLOR;
								break;
							
							case MouseEvent.ROLL_OVER :
								cell.textColor = Const.GREEN_COLOR;
								break;
							
							default:
								break;
						}
					}
				}				
			}
			
			public function changeCurrentLinePrompt(rowsIndex:int, type:String):void
			{
				switch(type)
				{
					case MouseEvent.ROLL_OUT :
						break;
					
					case MouseEvent.ROLL_OVER :
						if(currentLinePrompt.visible == false)
						{
							currentLinePrompt.visible = true;
						}						
						currentLinePrompt.move(5,(rowsIndex)*cellHeight+16);
						//TweenLite.tweenTo(currentLinePrompt,0.3,{x:5,y:(rowsIndex)*cellHeight+22});
						break;
					
					default:
						break;
				}
				
			}
			
			public function changeBgColor(rowsIndex:int, type:String):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var column:VGroup = this.getElementAt(i) as VGroup;
					if(column)
					{
						var targetCell:Cell = column.getElementAt(rowsIndex) as Cell;
						if(targetCell)
						{
							if(type == MouseEvent.ROLL_OUT)
							{
								targetCell.backgroupColor = targetCell.constColor;
								targetCell.name = "";
							}
							if(type == MouseEvent.ROLL_OVER)
							{
								//targetCell.backgroupColor = overColor;
							}
							if(type == SELECTED)
							{
								targetCell.backgroupColor = selectedColor;
								targetCell.name = SELECTED;
							}
							targetCell.invalidateDisplayList();
						}
					}					
				}
			}

			private function getFirstColumnRows():int
			{
				var firstColumn:VGroup=this.getElementAt(1) as VGroup;

				return firstColumn.numElements;
			}

			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider=value;

				initOrDelCellContainerl();
				dataToColumns();
			}

			/**
			 * 单元格默认颜色(0xFFFFFF)
			 */
			public function get defaultColor():uint
			{
				return _defaultColor;
			}

			/**
			 * @private
			 */
			public function set defaultColor(value:uint):void
			{
				_defaultColor = value;
			}

			/**
			 * 单元格选中颜色(0x1C8D34)
			 */
			public function get selectedColor():uint
			{
				return _selectedColor;
			}

			/**
			 * @private
			 */
			public function set selectedColor(value:uint):void
			{
				_selectedColor = value;
			}

			/**
			 * 显示列数字段
			 */
			public function get displayColumn():Array
			{
				return _displayColumn;
			}

			/**
			 * @private
			 */
			public function set displayColumn(value:Array):void
			{
				_displayColumn = value;
			}

			/**
			 * 显示列数字段完度</br>
			 * 如为0则表示为100% 宽度
			 */
			public function get displayColumnWidth():Array
			{
				return _displayColumnWidth;
			}

			/**
			 * @private
			 */
			public function set displayColumnWidth(value:Array):void
			{
				_displayColumnWidth = value;
			}

			public function get unfinishedColor():uint
			{
				return _unfinishedColor;
			}

			public function set unfinishedColor(value:uint):void
			{
				_unfinishedColor = value;
			}

			public function get cellHeight():int
			{
				return _cellHeight;
			}

			public function set cellHeight(value:int):void
			{
				_cellHeight = value;
			}

			/**
			 * 单元格背景色状态; 1:未完成，0已完成
			 */
			public function get bgColorField():String
			{
				return _bgColorField;
			}

			/**
			 * @private
			 */
			public function set bgColorField(value:String):void
			{
				_bgColorField = value;
			}

			/**
			 * 存储Grid列表选中数据
			 */
			public function get selectedItem():Array
			{
				return _selectedItem;
			}

			/**
			 * @private
			 */
			public function set selectedItem(value:Array):void
			{
				_selectedItem = value;
			}


		]]>
	</fx:Script>

</s:HGroup>
