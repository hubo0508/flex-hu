<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-7</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.printingoffice.framework.components.*"
					  backgroundColor="#F5F5F5"
					  top="0"
					  left="0"
					  width="100%"
					  height="115" >

	<fx:Script>
		<![CDATA[
			import com.printingoffice.framework.components.TooTip;
			import com.printingoffice.framework.util.Const;
			import com.printingoffice.framework.util.UIUtil;
			import com.printingoffice.framework.view.components.AdvancedSearchWindow;
			
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			
			/**
			 * 提示消息容器
			 */
			private var tootip:TooTip;
			
			/**
			 * 高级搜索容器
			 */
			private var advancedSearchWindow:AdvancedSearchWindow;
			
			/**
			 * <p>鼠标焦点事件</p>
			 */
			protected function focusEventHandler(event:FocusEvent):void
			{
				var tinput:TInput  = event.currentTarget as  TInput;
				var parentBC:BorderContainer = tinput.owner as BorderContainer;
				var bgColor:String = parentBC.getStyle("borderColor").toString();
				
				switch(event.type)
				{
					case FocusEvent.FOCUS_IN:
						parentBC.setStyle("borderColor",0x4D90FE);
						break;
					
					case FocusEvent.FOCUS_OUT :
						parentBC.setStyle("borderColor",0xD9D9D9);
						break;
					
					default:
						break;
				}		
			}
			
			/**
			 * <p>鼠标移入与移出目标对象时，触发</p>
			 */
			protected function detailedWindowImgMouseHandler(event:MouseEvent):void
			{
				var img:Image = event.currentTarget as Image;
				
				switch(event.type)
				{
					case MouseEvent.MOUSE_OVER:
						if(img.name == "drop-down"){
							img.name = "drop-down-over";
							img.source = null;
							img.source = "assets/image/drop-down-over.png";

							this.showTootip(true,img);
						}
						break;
					
					case MouseEvent.MOUSE_OUT :
						if(img.name == "drop-down-over"){
							img.name = "drop-down";
							img.source = null;
							img.source = "assets/image/drop-down.png";
							
							this.showTootip(false,img);
						}
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * <p>显示或删除【提示消息容器】</p>
			 * 
			 * 注：【提示消息容器】组件只在第一次使用时创建。消毁时并没有物理删除，只是隐藏容器，在第二次使用该容器时直接调用缓存。
			 * 
			 * @param value:Boolean true||false
			 * @param img:Image 从该对象中取得要显示【提示消息容器】的绝对坐标
			 */
			private function showTootip(value:Boolean,img:Image):void
			{
				if (value)
				{
					if (this.tootip == null)
					{
						tootip=new TooTip("显示搜索选项");
					}
					
					var point:Point = UIUtil.getUiAbsolutePosition(img);
					tootip.x = point.x -30;
					tootip.y = point.y+30;

					PopUpManager.addPopUp(tootip, UIUtil.getApplication(this), false);
				}
				else
				{
					if (this.tootip)
					{
						PopUpManager.removePopUp(tootip);
					}
				}
			}
			
			/**
			 * <p>点击图片时，弹出【高级搜索容器】组件</p>
			 * 
			 * 注：【高级搜索容器】组件只在第一次使用时创建。消毁时并没有物理删除，只是隐藏容器，在第二次使用该容器时直接调用缓存。
			 */
			protected function detailedWindowImgClickHandler(event:MouseEvent):void
			{
				if(advancedSearchWindow == null)
				{
					advancedSearchWindow = new AdvancedSearchWindow();	
					advancedSearchWindow.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE,mouseDownOutsideHandler,false,0,true);
					advancedSearchWindow.addEventListener(AdvancedSearchWindow.CLOSE_EVENT,mouseDownOutsideHandler,false,0,true);
					
					var point:Point = UIUtil.getUiAbsolutePosition(searchTextBC);
					point.y += searchTextBC.height;
					advancedSearchWindow.x = point.x;
					advancedSearchWindow.y = point.y;
					advancedSearchWindow.currentPoint = point;
				}
				
				setDetailedWindowImgVisible(false);
				
				PopUpManager.addPopUp(advancedSearchWindow, UIUtil.getApplication(this), false);				
			}
			
			/**
			 * 在使用 PopUpManager 打开的[【高级搜索容器】组件外部单击时，从该组件分派。
			 */
			protected function mouseDownOutsideHandler(event:FlexMouseEvent):void
			{
				setDetailedWindowImgVisible(true);
				
				PopUpManager.removePopUp(advancedSearchWindow);
			}

			/**
			 * 显示或隐藏【高级搜索容器】组件
			 */
			private function setDetailedWindowImgVisible(value:Boolean):void
			{
				if(detailedWindowImg.visible = value)
				{
					detailedWindowImg.visible = value;
				}
			}
		]]>
	</fx:Script>
	
	<s:BitmapImage source="{Const.navbg}" height="58" width="100%" top="0" left="0"/>	
	<mx:Image source="assets/image/nav-font.png" top="9" left="57"/>
	<!--<s:Label text="快印企业办公管理信息综合平台" fontSize="14" color="#FFFFFF" top="38" left="180"/>-->
	
	<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0xE5E5E5" weight="1" caps="square"/>
		</s:stroke>
	</s:Line>
	
	<s:BorderContainer id="searchTextBC" borderColor="#D9D9D9" backgroundColor="#F2F3F5" left="222" width="338" height="29" top="71">
		<components:TInput imeMode="CHINESE" height="100%" fontSize="16"  borderVisible="false" left="0" right="24" focusAlpha="0" contentBackgroundAlpha="0"
						   focusIn="focusEventHandler(event)" focusOut="focusEventHandler(event)"/>
		<mx:Image id="detailedWindowImg" name="drop-down" source="assets/image/drop-down.png"  width="21" height="27" right="0" top="0" useHandCursor="true" buttonMode="true"
				  		  mouseOut="detailedWindowImgMouseHandler(event)" mouseOver="detailedWindowImgMouseHandler(event)" click="detailedWindowImgClickHandler(event)"/>
	</s:BorderContainer> 
	<s:Button skinClass="assets.skin.SearchBtnSkin"  width="72" height="29" top="71" left="575"/>

</s:SkinnableContainer>
