<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-26</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" >
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DynamicEvent;
			
			import spark.components.BorderContainer;
			import spark.components.CheckBox;
			import spark.components.Label;
			import spark.skins.spark.BorderContainerSkin;
			
			/**
			 * 数据提供程序项目中作为数据提示显示的字段名称。默认情况下，该列表将在每个项目上查找 text 属性并将其显示出来。
			 */
			private var _dataField:String = "text";
			
			/**
			 * 默认列表项高度【内部使用】
			 */
			private var defaultItemMenuHeight:int = 35;
			
			/**
			 * 当前选中索引【内部使用】
			 */
			private var selectedIndex:Array = [];
			
			/**
			 * <p>初始列表项</p>
			 * 
			 * @param data:ArrayConllection 要查看的数据集
			 */
			public function initItem(data:ArrayCollection):void
			{
				if(data == null || data.length<=0)return;	
				
				var len:int = data.length;
				for(var i:int=0; i<len; i++)
				{
					var item:Object = data.getItemAt(i);					
					var instanceItem:BorderContainer = getInstanceOfItem(i,item);
					instanceItem.addEventListener(MouseEvent.CLICK,instanceItemMouseHandler,false,0,true);					
					instanceItem.addEventListener(MouseEvent.ROLL_OUT,instanceItemMouseHandler,false,0,true);
					instanceItem.addEventListener(MouseEvent.ROLL_OVER,instanceItemMouseHandler,false,0,true);
					instanceItem.x = 0;
					instanceItem.y = i * defaultItemMenuHeight;
					
					this.addElement(instanceItem);
				}
			}
			
			/**
			 * <p>鼠标的移入、移出、点击具体的列表项，触发</p>
			 * 
			 * 1、【MouseEvent.ROLL_OUT】控制列表项的背景颜色是否可见。</br>
			 * 2、【MouseEvent.ROLL_OVER】控制列表项的背景颜色是否可见，更新列表项背景颜色的坐标位置。</br>
			 * 3、【MouseEvent.CLICK】切换列表项的CheckBox状态，true||false。</br>
			 */
			protected function instanceItemMouseHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						changeBgVisible(false);
						break;
					
					case MouseEvent.ROLL_OVER :
						var singleMenu:BorderContainer = event.currentTarget as BorderContainer;
						changeBgVisible(true);
						bg.x = singleMenu.x;
						bg.y = singleMenu.y;
						break;
					
					case MouseEvent.CLICK :
						if(event.target is BorderContainerSkin)
						{
							var sm:BorderContainer = event.currentTarget as BorderContainer;
							var checkbox:CheckBox = sm.getElementAt(0) as CheckBox;
							if(checkbox)
							{
								checkbox.selected = !checkbox.selected;
							}	
						}											
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 控制列表项的背景颜色是否可见
			 */
			private function changeBgVisible(value:Boolean):void
			{
				if(bg.visible != value)
				{
					this.bg.visible = value;
				}
			}
			
			/**
			 * <p>创建列表项</p>
			 * 
			 * @param index:int 行索引
			 * @param item:Object 数据源
			 */
			private function getInstanceOfItem(index:int,item:Object):BorderContainer
			{
				var bc:BorderContainer = new BorderContainer();
				bc.setStyle("borderVisible",false);
				bc.setStyle("backgroundAlpha",0);
				bc.percentWidth = 100;
				bc.height = defaultItemMenuHeight;
				bc.useHandCursor = true;
				bc.buttonMode = true;
				bc.id = index.toString();
				
				var box:CheckBox = new CheckBox();
				box.label = item[dataField];
				box.verticalCenter = -4;
				box.left = 10;
				box.selected = Boolean(item["selected"]);
				box.id = index.toString();
				
				bc.addElement(box);
				
				return bc;
			}
			
			/**
			 * <p>设置具体项的状态</p>
			 * 
			 * @param rowIndex:String 行索引值
			 * @param value:Boolean 状态true||false
			 */
			public function setItemSelected(rowIndex:String, value:Boolean):void
			{
				if(rowIndex == null || rowIndex == "")return;
				
				var num:int = this.numElements;
				for(var k:int=0; k<num; k++)
				{
					var bc:BorderContainer = this.getElementAt(k) as BorderContainer;
					if(bc && bc.id.toString() == rowIndex)
					{
						var checkbox:CheckBox = bc.getElementAt(0) as CheckBox;
						if(checkbox && checkbox.selected != value)
						{
							checkbox.selected = value;
							break;
						}
					}
				}
			}
			
			/**
			 * 根据类型取得索引值
			 * 
			 * @param value:Boolean true选中值，false未选中值
			 * @return 索引值的数组形式
			 */
			public function getIndexValue(value:Boolean):Array
			{
				var indexValue:Array = [];
				
				var len:int = this.numElements;
				for(var i:int=0; i<len; i++)
				{					
					var cont:BorderContainer = this.getElementAt(i) as BorderContainer;
					if(cont)
					{
						var checkbox:CheckBox = cont.getElementAt(0) as CheckBox;
						if(checkbox.selected == value)
						{
							indexValue.push(checkbox.id);
						}
					}
				}
				
				return indexValue;
			}
			
			/**
			 * 取得最后列表项索引值
			 */
			private function getLastItemIndex():int
			{
				var cont:BorderContainer = this.getElementAt(this.numElements-1) as BorderContainer;
				return int(cont.id);
			}

			/**
			 * 数据提供程序项目中作为数据提示显示的字段名称。默认情况下，该列表将在每个项目上查找 text 属性并将其显示出来。
			 */
			public function get dataField():String
			{
				return _dataField;
			}

			/**
			 * @private
			 */
			public function set dataField(value:String):void
			{
				_dataField = value;
			}
			
		]]>
	</fx:Script>

	<s:Rect  id="bg" x="0" y="0" height="29" width="160" visible="false">
		<s:fill>
			<s:SolidColor color="#EEEEEE"/>
		</s:fill>
	</s:Rect>	
	
</s:SkinnableContainer>
