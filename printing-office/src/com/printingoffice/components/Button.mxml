<?xml version="1.0" encoding="utf-8"?>
<!--
<p><b>auth：</b>HUBO</p>
<p><b>create-time：</b>2012-2-9</p>
<p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   rollOut="rollHandler(event)"
				   rollOver="rollHandler(event)"
				   height="29"				   
				   borderVisible="false"
				   minWidth="10"
				   cornerRadius="2">
	
	<fx:Script>
		<![CDATA[
			import com.printingoffice.util.UIUtil;
			
			import mx.managers.PopUpManager;
			
			import spark.filters.DropShadowFilter;
			
			private var originalColor:Array = [0xF1F1F1,0xECE9E9];
			private var overColor:Array = [0xFFFFFF,0xF2F3F5];
			
			[Bindable]private var originalColor1:uint =0xF5F5F5;				
			[Bindable]private var originalColor2:uint = 0xECE9E9;
			
			private var filter:Array = null;
			
			private var tootip:TooTip;
			
			[Bindable]private var _text:String;
			
			private var _popMask:Boolean = true;
			
			override protected function measure():void
			{
				super.measure();
				
				minHeight = 29;
				minWidth = 35;
			}
			
			protected function rollHandler(event:MouseEvent):void
			{
				if(filter == null)
				{
					filter = [this.createDropShadowFilter()];
				}		
				if(tootip == null)
				{
					var tootipvalue:String = text == null || "" ? this.name : text;
					tootip = new TooTip(tootipvalue);
				}
				
				var bc:BorderContainer=event.currentTarget as BorderContainer;
				switch (event.type)
				{
					case MouseEvent.ROLL_OUT:
						bc.filters=[];
						
						PopUpManager.removePopUp(tootip);
						
						originalColor1 = this.originalColor[0];
						originalColor2 = this.originalColor[1];
						break;
					
					case MouseEvent.ROLL_OVER:
						bc.filters=filter;
						
						PopUpManager.addPopUp(tootip, UIUtil.getApplication(this), false);
						if(popMask)
						{
							tootip.x = (this.x+223) + this.width*0.5 - tootip.width*0.5;
							tootip.y = this.y+102+this.height+tootip.triangleH;	
						}
						else
						{
							var point:Point = UIUtil.getUiAbsolutePosition(this);
							tootip.x = point.x + this.width*0.5 - tootip.width*0.5;
							tootip.y = point.y+this.height+tootip.triangleH;	
						}
						
						
						originalColor1 = this.overColor[0];
						originalColor2 = this.overColor[1];
						break;
					
					default:
						break;
				}
				
			}
			
			private function createDropShadowFilter():spark.filters.DropShadowFilter				
			{		
				var dsf:spark.filters.DropShadowFilter = new spark.filters.DropShadowFilter();
				dsf.angle = 45;
				dsf.blurX = 4;
				dsf.blurY = 4;
				dsf.distance = 0;
				dsf.alpha = 0.3;
				dsf.color = 0x00000;
				dsf.knockout = false;
				dsf.quality = 1;
				dsf.strength = 1;
				dsf.inner = false;
				dsf.hideObject = false;
				
				return dsf;
			}
			
			[Bindable(event="text")]
			public function get text():String
			{
				return _text;
			}
			
			public function set text(value:String):void
			{
				_text = value;
				
				this.dispatchEvent(new Event("text"));
			}

			public function get popMask():Boolean
			{
				return _popMask;
			}

			public function set popMask(value:Boolean):void
			{
				_popMask = value;
			}

			
		]]>
	</fx:Script>
	
	<s:backgroundFill>		
		<s:LinearGradient rotation="90">
			<s:GradientEntry color="{originalColor1}"/>
			<s:GradientEntry color="{originalColor2}"/>
		</s:LinearGradient>
	</s:backgroundFill>
	
</s:BorderContainer>
