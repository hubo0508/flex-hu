<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-10</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.printingoffice.components.*"
					  xmlns:graphic="com.printingoffice.components.graphic.*"
					  xmlns:comview="com.printingoffice.view.components.*"
					  creationComplete="creationCompleteHandler(event)"
					  top="115"
					  left="0"
					  width="200"
					  height="100%">
	
	<fx:Script>
		<![CDATA[
			import assets.skin.ClickBtnSkin;
			
			import com.printingoffice.components.TooTip;
			import com.printingoffice.util.IconConst;
			import com.printingoffice.util.UIUtil;
			import com.printingoffice.view.components.ChooseMenuThemes;
			
			import mx.collections.ArrayCollection;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Button;
			import spark.components.Group;
			
			/**
			 * 模块菜单切换列表窗体
			 */
			private var chooseMenuThemes:ChooseMenuThemes;
			
			/**
			 * 提示消息容器
			 */
			private var tootip:TooTip;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
			
			}

			/**
			 * <p>点击当前菜单(菜单文字)外部容器，显示模块菜单切换列表窗体</p>
			 * 
			 * 注：创建与使用模[块切换窗体]缓存侧略，[模块切换窗体]只在第一次初始时创建，当第二调用或显示[模块切换窗体]时，不再初始化，直接使用缓存。
			 */
			protected function menuThemes_clickHandler(event:MouseEvent):void
			{
				if(chooseMenuThemes == null)
				{
					chooseMenuThemes = new ChooseMenuThemes();
					chooseMenuThemes.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE,mouseDownOutsideHandler,false,0,true);
					chooseMenuThemes.addEventListener(ChooseMenuThemes.CLICK_EVENT,chooseTypeClickHandler,false,0,true);
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					chooseMenuThemes.x = point.x;
					chooseMenuThemes.y = point.y + menuThemes.height + 2;
				}

				PopUpManager.addPopUp(chooseMenuThemes, UIUtil.getApplication(this), false);				
			}
			
			protected function chooseTypeClickHandler(event:DynamicEvent):void
			{
				var selectItem:Object = event.data;
				menuValue.text = selectItem.type;
				
				PopUpManager.removePopUp(chooseMenuThemes);
			}
			
			protected function mouseDownOutsideHandler(event:Event):void
			{
				PopUpManager.removePopUp(chooseMenuThemes);
			}

			protected function menuThemes_rollHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER:							
						this.showTootip(true);
						break;
					
					case MouseEvent.ROLL_OUT :
						this.showTootip(false);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 
			 */
			private function showTootip(value:Boolean):void
			{
				if (value)
				{
					if (tootip == null)
					{
						tootip = new TooTip("切换模块");
					} 
					
					var tootipwidth:Number = tootip.width;
					tootipwidth = tootipwidth == 0 ? 64*0.5 : tootipwidth * 0.5
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					tootip.x = (point.x + menuThemes.width*0.5) - tootipwidth;
					tootip.y = point.y + menuThemes.height+10; 
					
					PopUpManager.addPopUp(tootip, UIUtil.getApplication(this), false);
				}
				else
				{
					if (tootip)
					{
						PopUpManager.removePopUp(tootip);
					}
				}
			}

			/**
			 * 初始化用户常用菜单
			 */
			public function initCommonlyUsedMenu(data:ArrayCollection):void
			{
				commonlyUsedMenu.initMenuButton(data);
			}
			
			/**
			 * 初妈化用户快捷功能菜单入口
			 */
			public function initQuickEntranceBtn(text:String):void
			{
				var btn:spark.components.Button = new spark.components.Button();
				btn.left = 33;
				btn.height = 29;
				btn.width = 115;
				btn.label = text;
				btn.setStyle("color",0xFFFFFF);
				btn.setStyle("fontSize",15);
				btn.setStyle("skinClass",Class(ClickBtnSkin));
				
				if(quickEntrance.numElements > 0)
				{
					quickEntrance.removeAllElements();
				}
				quickEntrance.addElement(btn);
			}
	
		]]>
	</fx:Script>
	
	<!--模块菜单的切换-->
	<s:HGroup id="menuThemes"   verticalAlign="middle" useHandCursor="true" buttonMode="true"  y="26" x="20"
			  click="menuThemes_clickHandler(event)" rollOut="menuThemes_rollHandler(event)" rollOver="menuThemes_rollHandler(event)">
		<s:Label id="menuValue" text="前台接件"  color="#FF2222" fontSize="18"/>
		<graphic:Triangle rollMask="true" originalColor="#DD4B39" overColor="#D52F1B"/>
	</s:HGroup>
	
	<components:Line/>
	
	<!--根据每个不同角色，从数据库查询资源，创建角色菜单-->
	<s:SkinnableContainer  top="80" width="100%" height="100%">
		
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<!--常用功能快捷入口-->
		<s:SkinnableContainer id="quickEntrance" width="100%" />			
		
		<!--自定义常用功能-->
		<comview:MenuBar id="commonlyUsedMenu"/>
		
	</s:SkinnableContainer>
	
</s:SkinnableContainer>
