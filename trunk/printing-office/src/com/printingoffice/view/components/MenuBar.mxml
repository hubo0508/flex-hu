<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-12</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.printingoffice.view.components.*"
					  minHeight="50">

	<fx:Script>
		<![CDATA[
			import com.printingoffice.components.CloseButton;
			import com.printingoffice.core.TweenLite;
			import com.printingoffice.event.MenuEvent;
			import com.printingoffice.util.UIUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.core.FlexLoader;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Label;

			private var _dataField:String = "text"
				
			private var menuHeight:int = 29;

			private var redColor:uint = 0xDD4B39;
			
			private var defaultColor:uint = 0x222222;
			
			private var _removeimg:Boolean = false;
			
			public static const REMOVE:String = "removeMenu";
			
			private var CURR_MENU:String = "currentClickMenu";
			
			override protected function updateDisplayList(w:Number, h:Number):void
			{				
				super.updateDisplayList(w,h);
				
				var measuringHeight:Number = 0;
				
				var num:int = this.numElements;
				for(var i:int= 0; i<num; i++)
				{
					var menuText:MenuText = this.getElementAt(i) as MenuText;
					if(menuText)
					{
						measuringHeight += menuText.height;
					}
				}
				
				new TweenLite(this,0.3,{height:measuringHeight});
			}
			
			public function initMenuButton(data:ArrayCollection):void
			{
				if (data == null || data.length == 0)
					return;

				var len:int=data.length;
				for (var i:int=0; i < len; i++)
				{
					var menuText:MenuText  = this.createMenuText(i,data.getItemAt(i));
					menuText.x = 0;
					menuText.y = i * menuHeight;
					menuText.addEventListener(MouseEvent.ROLL_OUT,menuTextEventHandler,false,0,true);
					menuText.addEventListener(MouseEvent.ROLL_OVER,menuTextEventHandler,false,0,true);
					menuText.addEventListener(MouseEvent.CLICK,menuTextEventHandler,false,0,true);
					
					if(removeimg && i>0)
					{
						var closeButton:CloseButton = new CloseButton();
						closeButton.id = i.toString();
						closeButton.name = REMOVE;
						closeButton.addEventListener(MouseEvent.CLICK,removeImgHandler,false,0,true);
						
						menuText.addElement(closeButton);
					}

					this.addElement(menuText);
				}
			}
			
			protected function removeImgHandler(event:MouseEvent):void
			{
				var btn:CloseButton = event.currentTarget as CloseButton;
				
				var dye:DynamicEvent =new DynamicEvent(REMOVE);
				dye.data = btn.id;
				
				this.dispatchEvent(dye);				
			}
			
			public function clearBgLeftState():void
			{				
				if(this.bgLeft.visible)
				{
					this.bgLeft.visible = false;
				}
			}
			
			protected function menuTextEventHandler(event:MouseEvent):void
			{
				var menuText:MenuText = event.currentTarget as MenuText;
				var lastClickID:String = menuText.id.toString();
				
				switch(event.type)
				{
					case MouseEvent.CLICK :
						
						if(event.target is FlexLoader)break;
						
						var originalX:Number = menuText.x;
						var originalY:Number = menuText.y;
						
						menuText.textColor = redColor;
						menuText.name = CURR_MENU;
						changebgLeftPoint(menuText.x,menuText.y);
						
						clearLastClickColor(lastClickID);
						
						showOrHideCloseButton(false,menuText);
						
						this.dispatch(menuText.data["url"],menuText.data);
						
						break;
					
					case MouseEvent.ROLL_OUT :
						this.setBgrightVisible(false);
						
						showOrHideCloseButton(false,menuText);
						break;
					
					case MouseEvent.ROLL_OVER :
						this.setBgrightVisible(true);
						bgRight.x = menuText.x;
						bgRight.y = menuText.y
						
						showOrHideCloseButton(true,menuText);
						break;
					
					default :
						break;
				}
			}
			
			private function showOrHideCloseButton(value:Boolean,menuText:MenuText):void
			{
				if(menuText.name == CURR_MENU && value)return;
				
				var num:int = menuText.numElements;
				for(var i:int=0; i<num; i++)
				{
					var obj:Object = menuText.getElementAt(i);
					if(UIUtil.getName(obj) == REMOVE)
					{
						obj.visible  = value;
					}
				}
			}
			
			protected function dispatch(url:String, data:Object = null, types:String = null):void
			{
				var menuEvent:MenuEvent = new MenuEvent(MenuEvent.MENU_EVENT);
				menuEvent.url = url;
				menuEvent.data = data;
				menuEvent.types = types;
				
				this.dispatchEvent(menuEvent);
			}
			
			public function clearCurrentClickColor():void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var currBtn:MenuText = this.getElementAt(i) as  MenuText;
					if(currBtn && currBtn.name == CURR_MENU)
					{
						currBtn.textColor = defaultColor;
						currBtn.name = "";
						break;
					}
				}
			}
			
			public function clearLastClickColor(lastClickID:String):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var currBtn:MenuText = this.getElementAt(i) as  MenuText;
					if(currBtn && lastClickID != currBtn.id.toString() && currBtn.name == CURR_MENU)
					{
						currBtn.textColor = defaultColor;
						currBtn.name = "";
						break;
					}
				}
			}
			
			private function changebgLeftPoint(x:Number,y:Number):void
			{
				if(this.bgLeft.visible == false){
					this.bgLeft.visible = true;
				}				
				if(this.bgLeft.x != x)
				{
					new TweenLite(bgLeft, .5, {x: x});
				}
				if(this.bgLeft.y != y)
				{
					new TweenLite(bgLeft, .5, {y: y});
				}
			}
			
			private function setBgrightVisible(value:Boolean):void
			{
				if(bgRight.visible != value)
				{
					bgRight.visible = value;
				}
			}

			private function createMenuText(index:int,data:Object):MenuText
			{
				var menuText:MenuText = new MenuText();
				menuText.data = data;
				menuText.text = data[dataField];
				menuText.id = index.toString();
				
				return menuText;
			}

			public function get dataField():String
			{
				return _dataField;
			}

			public function set dataField(value:String):void
			{
				_dataField=value;
			}

			public function get removeimg():Boolean
			{
				return _removeimg;
			}

			public function set removeimg(value:Boolean):void
			{
				_removeimg = value;
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="menuEvent",type="com.printingoffice.event.MenuEvent")]
		[Event(name="removeMenu",type="mx.events.DynamicEvent")]
	</fx:Metadata>

	<s:Rect  id="bgRight" x="0" y="0" height="29" width="180" visible="false">
		<s:fill>
			<s:SolidColor color="#EEEEEE"/>
		</s:fill>
	</s:Rect>	
	
	<s:Rect id="bgLeft" visible="false" height="29" width="4" x="0" y="0">
		<s:fill>
			<s:SolidColor color="#DD4B39"/>
		</s:fill>
	</s:Rect>

</s:SkinnableContainer>
