<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-10</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:comview="com.printingoffice.framework.view.components.*"
					  xmlns:components="com.printingoffice.framework.components.*"
					  xmlns:graphic="com.printingoffice.framework.components.graphic.*"
					  creationComplete="creationCompleteHandler(event)"
					  top="115"
					  left="0"
					  width="200"
					  height="100%">
	
	<fx:Script>
		<![CDATA[
			import assets.skin.ClickBtnSkin;
			
			import com.printingoffice.framework.components.CloseButton;
			import com.printingoffice.framework.components.TooTip;
			import com.printingoffice.framework.core.TweenLite;
			import com.printingoffice.framework.event.MenuEvent;
			import com.printingoffice.framework.util.Const;
			import com.printingoffice.framework.util.UIUtil;
			import com.printingoffice.framework.view.components.ListContainer;
			import com.printingoffice.framework.view.components.MenuText;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IVisualElement;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.BorderContainer;
			import spark.components.Button;
			import spark.components.Group;
			import spark.components.supportClasses.SkinnableComponent;
			
			/**
			 * 模块菜单切换列表窗体
			 */
			private var listMenu:ListContainer;
			
			/**
			 * 提示消息容器
			 */
			private var tootip:TooTip;
	
			/**
			 * 模块菜单数据源
			 */
			private var _moduleMenuDataProvider:ArrayCollection;
			
			/**
			 * 数据提供程序项目中作为标签显示的字段名称
			 */
			private var _labelField:String = "text";
			
			///////常量/////////
			
			public static const QUICK_ENTRANCE:String = "quickEntrance";
			
			public static const DETAILED_MENU:String = "detailedMenu";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
			
			}

			/**
			 * <p>点击当前菜单(菜单文字)外部容器，显示[模块切换窗体]</p>
			 * 
			 * 注：创建与使用[模块切换窗体]缓存侧略，[模块切换窗体]只在第一次初始时创建，当第二调用或显示[模块切换窗体]时，不再初始化，直接使用缓存。
			 * 
			 * @see com.printingoffice.framework.view.LeftNavigator.initModuleMenu()
			 */
			protected function titleMenuClickHandler(event:MouseEvent):void
			{
				this.initModuleMenu();
				
				PopUpManager.addPopUp(listMenu, UIUtil.getApplication(this), false);				
			}
			
			/**
			 * <p>初始化[模块切换窗体]</p>
			 * 
			 * 注：</br>
			 * 1、只有当[模块切换窗体]没有创建时，调用该函数才会起作用。</br>
			 * 2、使用缓存策略。</br>
			 * 3、初始化完一级菜单后，判断是否有选中菜单，有选择菜单则初始化子菜单(二级菜单)。
			 * 
			 * @see com.printingoffice.framework.view.LeftNavigator.initChildrenMenu()
			 */
			public function initModuleMenu():void
			{
				if(listMenu == null)
				{
					listMenu = new  ListContainer();
					listMenu.filters = [UIUtil.getInstanceDropShadow()];
					listMenu.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE,mouseDownOutsideHandler,false,0,true);
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					listMenu.x = point.x;
					listMenu.y = point.y + menuThemes.height + 2;
					
					listMenu.initItem(moduleMenuDataProvider);	
					
					initChildrenMenu();
				}
			}
			
			/**
			 * <p>点击[模块切换窗体]外部任何位置，调用该函数。</p>
			 * 
			 * 功能说明：</br>
			 * 1、从顶级窗口容器中删除[模块切换窗体]，此时删除不是物理删除，在全局中仍然可以调用，下次弹出时，只需要调用缓存。
			 * 内部菜单资源只在第一次初始化加载，如要从新加载菜单资源需要重新登录。</br>
			 * 2、创建当前选中的菜单资源子菜单。</br>
			 * 3、删除未选中的子菜单资源。</br>
			 * 
			 * @see com.printingoffice.framework.view.LeftNavigator.initChildrenMenu()
			 */
			protected function mouseDownOutsideHandler(event:Event):void
			{				
				initChildrenMenu();
				PopUpManager.removePopUp(listMenu);
			}
			
			/**
			 * <p>创建或删除子菜单</p>
			 * 
			 * 功能说明：</br>
			 * 1、判断上次显示子菜单资源与此次选择中的菜单资源相对比，将此次未选择中的菜单子资源菜单从当前容器中删除。</br>
			 * 2、判断此次新增的子菜单资源是否已在菜单资源容器中，如不存在则创建子菜单资源，反之不用处理任何业务逻辑。</br>
			 * 
			 */
			public function initChildrenMenu():void
			{
				var notSelected:Array = listMenu.getIndexValue(false);
				var selected:Array = listMenu.getIndexValue(true);
				
				this.removeNotSelectedMenu(notSelected);
				this.addSelectedMenu(selected);

			}
			
			/**
			 * <p>创建与显示菜单子项(二级菜单)</p>
			 * 
			 * 创建前判断当前菜单子项是否已创建，如已创建则本次无需创建。反之创建并添加至菜单容器中。
			 */
			protected function addSelectedMenu(selected:Array):void
			{
				var len:int = selected.length;
				for(var i:int=0; i<len; i++)
				{
					var item:Object = moduleMenuDataProvider.getItemAt(int(selected[i]));
					
					var moduleName:String = item[labelField];
					
					if(isMenuAlreadyExists(moduleName) == false)
					{
						var childrenItem:ArrayCollection = item["childrenMenu"] as ArrayCollection;
						
						var detailedMenu:SkinnableContainer = this.createChildrenMenuContainer(selected[i],moduleName);
						detailedMenu.addElement(createChildrenMenu(selected[i],childrenItem,detailedMenu.getElementAt(1).height));
						
						menuGroup.addElement(detailedMenu);				
					}
				}		
			}
			
			/**
			 * <p>创建子菜单（二级菜单）容器，并初始化菜单项</P>
			 * 
			 * @param index:int 初始化一级菜单时的索引值
			 * @param data:ArrayCollection 数据源
			 * @param top:Number 从组件的上边缘到锚点目标的上边缘的垂直距离（以像素为单位）。 
			 */
			protected  function createChildrenMenu(index:int,data:ArrayCollection,top:Number):MenuBar
			{
				var menuBar:MenuBar = new MenuBar();
				menuBar.addEventListener(MenuEvent.MENU_EVENT,childrenMenuClickHandler,false,0,true);
				menuBar.initMenuButton(data);
				menuBar.top = top;
				menuBar.id = index.toString();
			
				return menuBar;
			}
			
			protected function commonlyUsedMenu_removeMenuHandler(event:DynamicEvent):void
			{
				var index:int  = int(event.data);
				
				removeSingleChildren(String(index) , commonlyUsedMenu);	

				var nextIndex:int =  getNextElementIndexByID((index+1).toString() , commonlyUsedMenu);
				if(nextIndex  <= commonlyUsedMenu.numElements && nextIndex >= 0)
				{					
					updateMenuLayoutPosition(nextIndex,commonlyUsedMenu);		
					
					scrollerlPositionChange();
				}
				else
				{
					commonlyUsedMenu.invalidateDisplayList();
				}
			}
			
			/**
			 * 点击所有子菜单捕获事件
			 */
			protected function childrenMenuClickHandler(event:MenuEvent):void
			{
				this.dispatch(event.url,event.data,event.types);			
				
				var menubar:MenuBar = event.currentTarget as MenuBar;
				if(menubar && UIUtil.getID(menubar) == "commonlyUsedMenu")
				{
					clearChildrenSelectedState();
				}
				else
				{
					commonlyUsedMenu.bgLeftHide();
					commonlyUsedMenu.menuTextToRestoreDefault();
					
					clearChildrenSelectedState(menubar.id);				
				}				
			}
			
			/**
			 * <p>更新菜单布局x,y坐标</p>
			 * 
			 * 注：当MenuBar中删除任何一个菜单项时，当前被删除的菜单项位置为空白，需要手动将其后所有菜单项移动一个元素。
			 * 
			 * @param index:int 在MenuBar组件中元素的索引位置
			 * @param menuBar:MenuBar 菜单容器
			 * 
			 * @see com.printingoffice.framework.view.components.MenuBar
			 */
			public function updateMenuLayoutPosition(index:int,menuBar:MenuBar):void
			{
				if(menuBar == null ) return;
				
				var num:int = menuBar.numElements;
				for(var i:int=index; i<num; i++)
				{
					var menuText:MenuText = menuBar.getElementAt(i) as MenuText;
					if(menuText)
					{
						menuText.move(0, menuText.y-menuText.height);
					}
				}
			}
			
			private function getNextElementIndexByID(ids:String,menuBar:MenuBar):int
			{
				var num:int = menuBar.numElements;
				for(var i:int=0; i<num; i++)
				{
					var menuText:MenuText = menuBar.getElementAt(i) as MenuText;
					if(menuText && menuText.id == ids)
					{
						return i;
						break;
					}
				}
				return -1;
			}
			
			private function getMenuTextHeight(menu:MenuBar):Number
			{
				var num:int = menu.numElements;
				for(var i:int=0; i<num; i++)
				{
					var menuText:MenuText = menu.getElementAt(i) as MenuText;
					if(menuText)
					{
						trace(menuText.text);
						return menuText.height;
						break;
					}
				}
				
				return 0;
			}
			
			/**
			 *<p>在指定菜单资源容器中删除某个二级菜单</p>
			 * 
			 * 注：【索引标识请参见】com.printingoffice.view.components.MenuBar.initMenuButton(data:ArrayCollection):void</br></br>
			 * 
			 * @param index:String 二级菜单索引标识
			 * @param menuBar:MenuBar 菜单容器 
			 */
			public function removeSingleChildren(index:String, menuBar:MenuBar):void
			{
				if(menuBar == null || index == null || index == "") return;
				
				var num:int = menuBar.numElements;
				for(var i:int=0; i<num; i++)
				{
					var element:Object = menuBar.getElementAt(i);
					var currentID:String = UIUtil.getID(element);
					if(currentID == index)
					{
						//TweenLite.tweenTo(element,0.4,{});
						menuBar.removeElementAt(i);
						break;
					}
				}
			}
			
			protected function clearChildrenSelectedState(currentClickID:String = null):void
			{				
				var num:int = menuGroup.numElements;
				for(var i:int=0; i<num; i++)
				{
					var bc:SkinnableContainer = menuGroup.getElementAt(i) as SkinnableContainer;	
					if(bc && UIUtil.getName(bc) == DETAILED_MENU)
					{
						if((currentClickID && bc.id != currentClickID) || !currentClickID)
						{
							var menubar:MenuBar = bc.getElementAt(bc.numElements-1) as MenuBar;
							menubar.bgLeftHide();
							menubar.menuTextToRestoreDefault();
						}
					}
				}
			}
			
			/**
			 * 取得在[模块切换窗体]中未选中的菜单资源，在当前菜单资源容器中查找并删除
			 */
			protected function removeNotSelectedMenu(notSelected:Array):void
			{
				var len:int = notSelected.length;				
				for(var i:int=0; i<len; i++)
				{
					var currMenuId:String = notSelected[i].toString();
					removeChildrenMenuByIndex(currMenuId);
				}	
			}
			
			private function createChildrenMenuContainer(index:int,moduleName:String):SkinnableContainer
			{
				var skinCon:SkinnableContainer = new SkinnableContainer();
				skinCon.name = DETAILED_MENU;
				skinCon.id = index.toString();
				skinCon.percentWidth = 100;
				
				var line:com.printingoffice.framework.components.graphic.Line = new com.printingoffice.framework.components.graphic.Line();
				line.top=0;
				line.left = 28;
				line.right = 20;
				line.percentWidth = 100;
				
				var group:Group = new Group();
				group.percentWidth = 100;
				group.top = 0;
				group.left = 0;
				group.height = 30;
				group.addEventListener(MouseEvent.ROLL_OUT,submenuTitleEventHandler,false,0,true);
				group.addEventListener(MouseEvent.ROLL_OVER,submenuTitleEventHandler,false,0,true);
				
				var label:Label = new Label();
				label.text = moduleName;
				label.setStyle("color",Const.RED_COLOR);
				label.left = 33;
				label.verticalCenter = 0;
				//label.setStyle("fontWeight","bold");
				label.setStyle("fontSize",12);

				var closeButton:CloseButton = new CloseButton();
				closeButton.verticalCenter = 0;
				closeButton.right = 8;
				closeButton.id = index.toString();
				closeButton.addEventListener(MouseEvent.CLICK,clickCloseButtonHandler,false,0,true);
				
				group.addElement(label);
				group.addElement(closeButton);
				
				skinCon.addElement(line);
				skinCon.addElement(group);
				
				return skinCon;
			}
			
			protected function clickCloseButtonHandler(event:MouseEvent):void
			{
				var btn:CloseButton = event.currentTarget as CloseButton;
				listMenu.setItemSelected(btn.id, false);
				
				removeChildrenMenuByIndex(btn.id);
			}
			
			public function removeChildrenMenuByIndex(index:String):void
			{
				var num:int = menuGroup.numElements;
				for(var k:int=0; k<num; k++)
				{
					var ele:IVisualElement = menuGroup.getElementAt(k);
					if(UIUtil.getName(ele) == DETAILED_MENU && UIUtil.getID(ele) == index)
					{
						menuGroup.removeElement(ele);
						break;
					}
				}
			}
			
			protected function submenuTitleEventHandler(event:MouseEvent):void
			{
				var group:Group = event.currentTarget as Group;
				var btn:CloseButton = group.getElementAt(1) as CloseButton;
				
				var submenu:SkinnableContainer = group.parentDocument.parent as SkinnableContainer
				if(submenu)
				{
					var menuBar:MenuBar = submenu.getElementAt(2) as MenuBar;
					if(menuBar.hasSelected() && event.type == MouseEvent.ROLL_OVER)
					{
						return;
					}
				}
				
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						settingCloseButtonIsVisible(false,btn);
						break;
					
					case MouseEvent.ROLL_OVER :
						settingCloseButtonIsVisible(true,btn);
						break;
					
					default:
						break;
				}
			}	
			
			/**
			 * 设置关闭按钮是否可见
			 * 
			 * @param value:Boolean true || false
			 * @param btn:CloseButton 关闭按钮
			 */
			private function settingCloseButtonIsVisible(value:Boolean, btn:CloseButton):void
			{
				if(btn == null)return;
				
				if(btn.visible != value)
				{
					btn.visible = value;	
				}
			}
				
			/**
			 * 根据一级菜单名称查找是否已在菜单容器里
			 */
			private function isMenuAlreadyExists(value:String):Boolean
			{
				var returnValue:Boolean = false;
				
				var len:int = menuGroup.numElements;
				for(var i:int=0; i<len; i++)
				{
					var ele:Object  = menuGroup.getElementAt(i);					
					if(UIUtil.getName(ele) == DETAILED_MENU)
					{
						var group:Group  = ele.getElementAt(1) as Group;	
						var label:Label = group.getElementAt(0) as Label;
						if(label && label.text == value)
						{
							returnValue = true;
							break;
						}
					}
				}
				
				return returnValue;
			}

			/**
			 * <p>鼠标移过当前菜单(菜单文字)容器上时，显示提示窗体</p>
			 */
			protected function menuThemes_rollHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER:							
						this.showTootip(true);
						break;
					
					case MouseEvent.ROLL_OUT :
						this.showTootip(false);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * <p>鼠标移过当前菜单(菜单文字)容器上时，显示提示窗体</p>
			 * 
			 * 注：</br>
			 * 1、创建与使用[提提示窗体]缓存侧略，[提示窗体]只在第一次初始时创建，当第二调用或显示[提示窗体]时，不再初始化，直接使用缓存。</br>
			 * 2、当第一次创建[提提示窗体]时，宽度暂时不能确定，宽度定死为64，容后再解决此问题。
			 */
			private function showTootip(value:Boolean):void
			{
				if (value)
				{
					if (tootip == null)
					{
						tootip = new TooTip("切换模块");
					} 
					
					var tootipwidth:Number = tootip.width;
					tootipwidth = tootipwidth == 0 ? 64*0.5 : tootipwidth * 0.5
					
					var point:Point = UIUtil.getUiAbsolutePosition(menuThemes);
					tootip.x = (point.x + menuThemes.width*0.5) - tootipwidth;
					tootip.y = point.y + menuThemes.height+10; 
					
					PopUpManager.addPopUp(tootip, UIUtil.getApplication(this), false);
				}
				else
				{
					if (tootip)
					{
						PopUpManager.removePopUp(tootip);
					}
				}
			}

			/**
			 * 初始化用户常用菜单
			 */
			public function initCommonlyUsedMenu(data:ArrayCollection):void
			{
				commonlyUsedMenu.initMenuButton(data);
			}
			
			/**
			 * 初妈化用户快捷功能菜单入口
			 */
			public function initQuickEntranceBtn(data:Array):void
			{
				var btn:spark.components.Button = new spark.components.Button();
				btn.left = 33;
				btn.height = 29;
				btn.width = 115;
				btn.label = data[0];
				btn.setStyle("color",0xFFFFFF);
				btn.setStyle("fontSize",15);
				btn.setStyle("skinClass",Class(ClickBtnSkin));
				btn.name = data[1];
				btn.useHandCursor = true;
				btn.buttonMode = true;
				btn.addEventListener(MouseEvent.CLICK,quickEntranceMenuHanler,false,0,true);
				
				if(quickEntrance.numElements > 0)
				{
					quickEntrance.removeAllElements();
				}
				quickEntrance.addElement(btn);
			}
	
			/**
			 * 点击常用功能快捷入口触发
			 */
			protected function quickEntranceMenuHanler(event:MouseEvent):void
			{
				var btn:spark.components.Button = event.currentTarget as spark.components.Button;
				this.dispatch(null,null,btn.name);
			}
			
			/**
			 * 派发菜单事件
			 * 
			 * @param url:String 路径
			 * @param data:Object 传递值
			 */
			public function dispatch(url:String, data:Object = null, types:String = null):void
			{
				var menuEvent:MenuEvent = new MenuEvent(MenuEvent.MENU_EVENT);
				menuEvent.url = url;
				menuEvent.data = data;
				menuEvent.types = types;
				
				this.dispatchEvent(menuEvent);
			}

			/**
			 * 当SubmenuContainer容器高度发生改变，其内部的verticalScrollPosition属性值会变化，调用本函数
			 * 
			 * @see com.printingoffice.framework.view.LeftNavigator.scrollerlPositionChange()
             * @see com.printingoffice.framework.view.components.SubmenuContainer
			 */
			protected function menuGroup_scrollPositionChangeHandler(event:Event):void
			{
				scrollerlPositionChange();
			}
			
			/**
			 * <p>当SubmenuContainer容器中出现滚动条，其属性verticalScrollPosition值发生改变时，调用</p>
			 * 
			 * 当属性值verticalScrollPosition改变时，判断是否大于0(>0)，如>0则显示提示容器。
			 * 
			 * @see com.printingoffice.framework.view.components.SubmenuContainer
			 */
			public function scrollerlPositionChange():void
			{
				if (menuGroup.verticalScrollPosition > 0)
				{
					UIUtil.setContainerVisible(true,scrollerMaskTop);
					
					scrollerMaskTop.y = menuSource.top + menuGroupScroller.y;
				}
				else
				{
					UIUtil.setContainerVisible(false,scrollerMaskTop);
				}
			}

			/**
			 * 数据提供程序项目中作为标签显示的字段名称
			 */
			public function get labelField():String
			{
				return _labelField;
			}

			/**
			 * @private
			 */
			public function set labelField(value:String):void
			{
				_labelField = value;
			}

			/**
			 * 模块菜单数据源
			 */
			public function get moduleMenuDataProvider():ArrayCollection
			{
				return _moduleMenuDataProvider;
			}

			/**
			 * @private
			 */
			public function set moduleMenuDataProvider(value:ArrayCollection):void
			{
				_moduleMenuDataProvider = value;
			}

			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="menuEvent",type="com.printingoffice.framework.event.MenuEvent")]
	</fx:Metadata>

	<!--模块菜单的切换-->
	<s:HGroup id="menuThemes"   verticalAlign="middle" useHandCursor="true" buttonMode="true"  y="26" x="20"
			  click="titleMenuClickHandler(event)" rollOut="menuThemes_rollHandler(event)" rollOver="menuThemes_rollHandler(event)">
		<s:Label id="menuValue" text="功能菜单"  color="#FF2222" fontSize="18"/>
		<graphic:Triangle rollMask="true" originalColor="#DD4B39" overColor="#D52F1B"/>
	</s:HGroup>
	
	<!--分隔线-->
	<graphic:Line/>
		
	<!--根据每个不同角色，从数据库查询资源，创建角色菜单  backgroundColor="#D5D5D5"-->
	<components:MenuResourcesContainer  id="menuSource"  top="80" width="100%" height="100%">
		
		<!--常用功能快捷入口-->
		<s:SkinnableContainer id="quickEntrance" width="100%" />			
		
		<!--自定义常用功能-->
		<comview:MenuBar closeButton="true" menuEvent="childrenMenuClickHandler(event)" removeMenu="commonlyUsedMenu_removeMenuHandler(event)" id="commonlyUsedMenu"/>

		<!--菜单容器-->	
		<comview:SubmenuContainer id="menuGroup"   width="180" height="100%" scrollPositionChange="menuGroup_scrollPositionChangeHandler(event)" />
		<s:Scroller id="menuGroupScroller" viewport="{menuGroup}" height="100%" width="180"/>
		
	</components:MenuResourcesContainer>
	
	<!--当出现滚动条时，显示该容器-->
	<s:Group id="scrollerMaskTop" height="13" width="100%" visible="false" >
		<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" height="0" top="0" alpha=".7" left="28" right="27">
			<s:stroke>
				<s:SolidColorStroke color="0xE5E5E5" weight="1" caps="square" alpha=".7"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" height="0" top="1" alpha=".5" left="28" right="27">
			<s:stroke>
				<s:SolidColorStroke color="0xE5E5E5" weight="1" caps="square" alpha=".5"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="0" xTo="0" yFrom="0" yTo="0" width="100%" height="0" top="2" alpha=".3" left="28" right="27">
			<s:stroke>
				<s:SolidColorStroke color="0xE5E5E5" weight="1" caps="square" alpha=".3"/>
			</s:stroke>
		</s:Line>
	</s:Group>
	
</s:SkinnableContainer>