<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-2-12</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.printingoffice.view.components.*"
					  minHeight="50">

	<fx:Script>
		<![CDATA[
			import com.printingoffice.framework.components.CloseButton;
			import com.printingoffice.framework.core.TweenLite;
			import com.printingoffice.framework.event.MenuEvent;
			import com.printingoffice.framework.util.Const;
			import com.printingoffice.framework.util.UIUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.core.FlexLoader;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Label;

			/**
			 * 数据提供程序项目中作为数据提示显示的字段名称。默认情况下，该列表将在每个项目上查找 text 属性并将其显示出来。
			 */
			private var _dataField:String = "text"
			
			/**
			 * 默认【菜单项】高度【内部使用】
			 */
			private var defaultItemHeight:int = 29;
			
			/**
			 * 在【菜单项】创建时，其右侧是否显示关闭按钮，默认false
			 */
			private var _closeButton:Boolean = false;
			
			/**
			 * 在【菜单项】创建时，closeButton=true的情况下，点击关闭按钮抛出事件常量值(类型 )
			 */
			public static const REMOVE_MENU:String = "removeMenu";
			
			/**
			 * <p>【菜单项】标识</p>
			 * 
			 * 注：</br>
			 * 1、菜单项标识可从MenuText.name属性取得。</br>
			 * 2、默认菜单项标识为空字符串，当用户单击【菜单项】后将【菜单项】name属性将赋值为MenuBar.REMOVE_MENU。</br>
			 */
			public static const CURR_MENU:String = "currentMenu";
			
			/**
			 * <p>继续父容器updateDisplayList。</p>
			 * 
			 * 当容器布局改变时，重新手动计算高度，改变整个容器高度
			 */
			override protected function updateDisplayList(w:Number, h:Number):void
			{				
				super.updateDisplayList(w,h);
				
				var measuringHeight:Number = 0;
				
				var num:int = this.numElements;
				for(var i:int= 0; i<num; i++)
				{
					var menuText:MenuText = this.getElementAt(i) as MenuText;
					if(menuText)
					{
						measuringHeight += menuText.height;
					}
				}
				
				new TweenLite(this,0.3,{height:measuringHeight});
			}
			
			/**
			 * <p>初始化【菜单项】</p>
			 * 
			 * 注：</br>
			 * 在创建【菜单项】后，是否显示右侧关闭按钮，根据属性值closeButton来判断，并且第一个元素不能有关闭按钮。
			 * 
			 * @parm data:ArrayCollection 要查看的数据集
			 */
			public function initMenuButton(data:ArrayCollection):void
			{
				if (data == null || data.length == 0)
					return;

				var len:int=data.length;
				for (var i:int=0; i < len; i++)
				{
					var instanceItem:MenuText  = this.getInstanceItemMenuText(i,data.getItemAt(i));
					instanceItem.x = 0;
					instanceItem.y = i * defaultItemHeight;
					instanceItem.addEventListener(MouseEvent.ROLL_OUT,instanceItemMenuTextHandler,false,0,true);
					instanceItem.addEventListener(MouseEvent.ROLL_OVER,instanceItemMenuTextHandler,false,0,true);
					instanceItem.addEventListener(MouseEvent.CLICK,instanceItemMenuTextHandler,false,0,true);
					
					if(closeButton && i>0)
					{
						var rightCloseButton:CloseButton = new CloseButton();
						rightCloseButton.id = i.toString();
						rightCloseButton.verticalCenter = 0;
						rightCloseButton.name = REMOVE_MENU;
						rightCloseButton.addEventListener(MouseEvent.CLICK,rightCloseHandler,false,0,true);
						
						instanceItem.addElement(rightCloseButton);
					}

					this.addElement(instanceItem);
				}
			}
			
			/**
			 * <p>判断是当前【菜单容器】中是否有选择中的【菜单项】</p>
			 * 
			 * @return 在当前【菜单容器】中有【菜单项】选中，则返回true，否则false。
			 */
			public function hasSelected():Boolean
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var instanceItem:MenuText = this.getElementAt(i) as MenuText;
					if(instanceItem && instanceItem.name == CURR_MENU)
					{
						return true;
					}
				}
				
				return false;
			}
			
			/**
			 * 点击【菜单项】右侧的关闭按钮，抛出事件。
			 */
			protected function rightCloseHandler(event:MouseEvent):void
			{
				var btn:CloseButton = event.currentTarget as CloseButton;
				
				var dye:DynamicEvent =new DynamicEvent(REMOVE_MENU);
				dye.data = btn.id;
				
				this.dispatchEvent(dye);				
			}
			
			/**
			 * <p>鼠标的移入、移出、点击具体的列表项，触发</p>
			 * 
			 * 1、【MouseEvent.ROLL_OUT】</br>
			 * 2、【MouseEvent.ROLL_OVER】</br>
			 * 3、【MouseEvent.CLICK】</br>
			 */
			protected function instanceItemMenuTextHandler(event:MouseEvent):void
			{
				var instanceItem:MenuText = event.currentTarget as MenuText;
				var lastClickID:String = instanceItem.id.toString();
				
				switch(event.type)
				{
					case MouseEvent.CLICK :
						
						if(event.target is FlexLoader)break;
						
						var originalX:Number = instanceItem.x;
						var originalY:Number = instanceItem.y;
						
						instanceItem.textColor = Const.RED_COLOR;
						instanceItem.name = CURR_MENU;
						changebgLeftPoint(instanceItem.x,instanceItem.y);
						
						clearLastClickColor(lastClickID);
						
						showOrHideCloseButton(false,instanceItem);
						
						this.dispatch(instanceItem.data["url"],instanceItem.data);
						
						break;
					
					case MouseEvent.ROLL_OUT :
						rectVisible(false,bg);
						
						showOrHideCloseButton(false,instanceItem);
						break;
					
					case MouseEvent.ROLL_OVER :
						rectVisible(true,bg);
						bg.x = instanceItem.x;
						bg.y = instanceItem.y
						
						showOrHideCloseButton(true,instanceItem);
						break;
					
					default :
						break;
				}
			}
			
			/**
			 * <p>显示或隐藏【菜单项】右侧关闭按钮</p>
			 * 
			 * 当菜单项容器【MenuText】的标识【MenuText.name】为选中的【菜单项时】，则不作任何业务处理。
			 * 
			 * @param value:Boolean true || false
			 * @param instanceItem:MenuText 菜单项容器
			 */
			public function showOrHideCloseButton(value:Boolean,instanceItem:MenuText):void
			{
				if(instanceItem.name == CURR_MENU && value)return;
				
				var num:int = instanceItem.numElements;
				for(var i:int=0; i<num; i++)
				{
					var element:Object = instanceItem.getElementAt(i);
					if(UIUtil.getName(element) == REMOVE_MENU)
					{
						element.visible  = value;
					}
				}
			}
			
			/**
			 * 派发事件
			 */
			protected function dispatch(url:String, data:Object = null, types:String = null):void
			{
				var menuEvent:MenuEvent = new MenuEvent(MenuEvent.MENU_EVENT);
				menuEvent.url = url;
				menuEvent.data = data;
				menuEvent.types = types;
				
				this.dispatchEvent(menuEvent);
			}
			
			/**
			 * 将当前菜单容器中选中的文本还原到初始化颜色
			 */
			public function restituteSelectedTextColor():void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var currBtn:MenuText = this.getElementAt(i) as  MenuText;
					if(currBtn && currBtn.name == CURR_MENU)
					{
						currBtn.textColor = Const.DEFAULT_COLOR;
						currBtn.name = "";
						break;
					}
				}
			}
			
			public function clearLastClickColor(lastClickID:String):void
			{
				var num:int = this.numElements;
				for(var i:int=0; i<num; i++)
				{
					var currBtn:MenuText = this.getElementAt(i) as  MenuText;
					if(currBtn && lastClickID != currBtn.id.toString() && currBtn.name == CURR_MENU)
					{
						currBtn.textColor = Const.DEFAULT_COLOR;
						currBtn.name = "";
						break;
					}
				}
			}
			
			private function changebgLeftPoint(x:Number,y:Number):void
			{
				if(this.bgLeft.visible == false){
					this.bgLeft.visible = true;
				}				
				if(this.bgLeft.x != x)
				{
					new TweenLite(bgLeft, .5, {x: x});
				}
				if(this.bgLeft.y != y)
				{
					new TweenLite(bgLeft, .5, {y: y});
				}
			}
			
			/**
			 * 隐藏【菜单项】左侧图形
			 */
			public function bgLeftHide():void
			{
				rectVisible(false,bgLeft);
			}
			
			/**
			 * 显示或隐藏填充图形元素【Rect】
			 * 
			 * @param value:Boolean true||false
			 * @param rect:Rect 填充图形元素
			 */
			private function rectVisible(value:Boolean, rect:Rect):void
			{
				if(rect.visible != value)
				{
					rect.visible = value;
				}
			}

			/**
			 * <p>创建【菜单项】</p>
			 * 
			 * @param index:int 行索引值
			 * @parma data:Ojbect 单行数据源
			 */
			private function getInstanceItemMenuText(index:int,data:Object):MenuText
			{
				var menuText:MenuText = new MenuText();
				menuText.data = data;
				menuText.text = data[dataField];
				menuText.id = index.toString();
				
				return menuText;
			}

			/**
			 * 数据提供程序项目中作为数据提示显示的字段名称。默认情况下，该列表将在每个项目上查找 text 属性并将其显示出来。
			 */
			public function get dataField():String
			{
				return _dataField;
			}

			/**
			 * @private
			 */
			public function set dataField(value:String):void
			{
				_dataField = value;
			}

			/**
			 * 在【菜单项】创建时，其右侧是否显示关闭按钮，默认false
			 */
			public function get closeButton():Boolean
			{
				return _closeButton;
			}

			/**
			 * @private
			 */
			public function set closeButton(value:Boolean):void
			{
				_closeButton = value;
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="menuEvent",type="com.printingoffice.framework.event.MenuEvent")]
		[Event(name="removeMenu",type="mx.events.DynamicEvent")]
	</fx:Metadata>
	
	<!--菜单项背景颜色-->
	<s:Rect  id="bg" x="0" y="0" height="29" width="180" visible="false">
		<s:fill>
			<s:SolidColor color="#EEEEEE"/>
		</s:fill>
	</s:Rect>	
	
	<!--菜单项左侧图形-->
	<s:Rect id="bgLeft" visible="false" height="29" width="4" x="0" y="0">
		<s:fill>
			<s:SolidColor color="#DD4B39"/>
		</s:fill>
	</s:Rect>

</s:SkinnableContainer>
