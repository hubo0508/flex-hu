<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 mouseWheel="mouseWheelHandler(event)"
		 height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.biiway.stockassistant.components.ExpandGroup;
			import com.biiway.stockassistant.core.TweenLite;
			import com.biiway.stockassistant.event.MenuEvent;
			import com.biiway.stockassistant.util.Const;
			import com.biiway.stockassistant.util.Util;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.HGroup;
			import spark.components.Label;
			
			private var _datafield:String = "text";
			
			private var _dataProvider:ArrayCollection;
			
			private var creationCompleteMark:Boolean = false;
			
			private var scrolldelta:int;
			
			private var types:String;
			
			public var datafields:Array;
			
			public var fieldPrompt:Array;
			
			private var tootip:NavigationMenu_Prompt;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				creationCompleteMark = true;
				
				this.height = this.height - Const.GAP_SHADOW;
				
				initMenu();
			}
			
			override public function set verticalScrollPosition(value:Number):void 
			{
				value =  (value - scrolldelta) <= 0 ? 0 : (value - scrolldelta);
				super.verticalScrollPosition = value;	
			}
			
			/**
			 * 当鼠标滚轮滚动到 InteractiveObject 实例上时分派。如果目标为文本字段，则作为默认行为，该文本会滚动。
			 */
			protected function mouseWheelHandler(event:MouseEvent):void
			{
				scrolldelta = event.delta;
			}
			
			private function initMenu():void
			{
				if(dataProvider == null || dataProvider.length == 0){ 
					content  ? content.removeAllElements() : null;
					return;
				}
				
				content.removeAllElements();
				
				for(var i:int=0,num:int=dataProvider.length; i<num; i++)
				{
					var data:Object = dataProvider.getItemAt(i);
					
					var group:ExpandGroup = new ExpandGroup();
					group.height = 30;
					group.y = i * 30;
					group.width = this.width-30;
					group.data = data;
					group.addEventListener(MouseEvent.ROLL_OUT,menuContainerHandler,false,0,true);
					group.addEventListener(MouseEvent.ROLL_OVER,menuContainerHandler,false,0,true);
					group.addEventListener(MouseEvent.CLICK,menuContainerHandler,false,0,true);
					
					if(datafields == null){
						
						var label:Label = createDisplayText(data[datafield]);
						label.toolTip  = data[datafield];
						
						group.addElement(label);
						
					}else{
						
						var nGroup:HGroup = new HGroup();
						nGroup.gap = 0;
						nGroup.percentHeight = 100;
						nGroup.percentWidth = 100;
						nGroup.verticalAlign = "middle";
						
						for(var u:int=0,unum:int=datafields.length; u<unum; u++)
						{
							var nField:String = datafields[u];
							var nLabel:Label = createDisplayText(u <= 0 ? data[nField] : ("[" + data[nField] + "]"));
							nLabel.id = nField;
							nLabel.addEventListener(MouseEvent.ROLL_OUT,nLabelHandler,false,0,true);
							nLabel.addEventListener(MouseEvent.ROLL_OVER,nLabelHandler,false,0,true);
							nLabel.addEventListener(MouseEvent.MOUSE_MOVE,nLabelHandler,false,0,true);
							
							nGroup.addElement(nLabel);
						}
						
						group.addElement(nGroup);
					}
					
					content.addElement(group);
				}
			}
			
			/**
			 * 创建菜单文本
			 */
			private function createDisplayText(text:String):Label
			{
				var nLabel:Label = new Label();
				nLabel.text = text;
				nLabel.verticalCenter = 0;
				nLabel.maxWidth = this.width-30;
				nLabel.setStyle("lineBreak","toFit");
				nLabel.maxDisplayedLines = 1;
				
				return nLabel;
			}
			
			protected function nLabelHandler(event:MouseEvent):void
			{
				var label:Label = event.currentTarget as Label;
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						showOrHideTootip(fieldPrompt[label.id],false);
						break;
					
					case MouseEvent.ROLL_OVER :
						showOrHideTootip(fieldPrompt[label.id],true);
						break;

					case MouseEvent.MOUSE_MOVE :
						if(!tootip)return;
						tootip.x = FlexGlobals.topLevelApplication.mouseX + 4;
						tootip.y = FlexGlobals.topLevelApplication.mouseY + 18;
						break;
					
					default:
						break;
				}
			}
			
			private function showOrHideTootip(text:String, value:Boolean):void
			{
				if (value)
				{
					tootip ? null : tootip=new NavigationMenu_Prompt();
					tootip.text = text;
					
					tootip.x = FlexGlobals.topLevelApplication.mouseX + 4;
					tootip.y = FlexGlobals.topLevelApplication.mouseY + 18;

					PopUpManager.addPopUp(tootip, Util.application, false);
				}
				else
				{
					tootip ? PopUpManager.removePopUp(tootip) : null;
				}
			}
			
			protected function menuContainerHandler(event:MouseEvent):void
			{
				
				var menuContainer:ExpandGroup = event.currentTarget as ExpandGroup;
				var obj:Object = menuContainer.getElementAt(0);

				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						if(!datafields && obj is Label){
							updateTextStyle(Const.DEFAULT_COLOR, obj as Label);
						}else{
							for(var i:int=0,inum:int=obj.numElements; i<inum; i++)
							{
								updateTextStyle(Const.DEFAULT_COLOR, obj.getElementAt(i) as Label);
							}
						}
						break;
					
					case MouseEvent.ROLL_OVER :
						if(!datafields &&  obj is Label){
							updateTextStyle(Const.RED_COLOR, obj as Label);
						}else{
							for(var u:int=0,unum:int=obj.numElements; u<unum; u++)
							{
								updateTextStyle(Const.RED_COLOR,  obj.getElementAt(u) as Label);
							}
						}
						break;
					
					case MouseEvent.CLICK :
						
						setMenuTextDefaultColor("click");
						
						if(!datafields && obj is Label){
							obj.name = "CURRENT";
							updateTextStyle(Const.RED_COLOR,obj as Label);
							dispatchMenuClickEvent(obj.text, menuContainer.data);
						}else{
							var text:String = "";
							for(var p:int=0,pnum:int=obj.numElements; p<pnum; p++)
							{
								var nLabel:Label = obj.getElementAt(p) as Label;
								if(nLabel is Label && nLabel.name != "CURRENT")
								{
									text += nLabel.text;
									nLabel.name = "CURRENT";
									updateTextStyle(Const.RED_COLOR,nLabel);
								}
							}
							dispatchMenuClickEvent(text, menuContainer.data);
						}
						
						updateBgRectY(menuContainer.y);
						break;
					
					default:
						break;
				}
			}
			
			/**
			 * 设置菜单文本默认颜色
			 */
			private function setMenuTextDefaultColor(type:String = null):void
			{
				var clearMark:Boolean = false;
				for(var i:int=0,num:int=content.numElements; i<num; i++)
				{
					var obj:Object = (content.getElementAt(i) as ExpandGroup).getElementAt(0);
					if(obj is Label && obj.name == "CURRENT" && !type)
					{
						var oLabel:Label = obj as Label;
						oLabel.name = "";
						updateTextStyle(Const.DEFAULT_COLOR,oLabel);
						break;
					}
					
					if(obj is HGroup)
					{
						var ngroup:HGroup = obj as HGroup;
						for(var p:int=0,pnum:int=ngroup.numElements; p<pnum; p++)
						{
							var nLabel:Label = ngroup.getElementAt(p) as Label;
							if(nLabel is Label && !type) {
								nLabel.name = "";
								updateTextStyle(Const.DEFAULT_COLOR,nLabel);
								clearMark = true;
							}else{
								if(nLabel.name != "CURRENT"){
									break;
								}
								nLabel.name = "";
								updateTextStyle(Const.DEFAULT_COLOR,nLabel);
							}
						}
						if(clearMark)break;
					}
				}
			}
			
			/**
			 * 点击菜单时，抛出事件
			 */
			private function dispatchMenuClickEvent(text:String, data:Object):void
			{
				var menuevent:MenuEvent = new MenuEvent(MenuEvent.MENUEVENT);
				menuevent.text = text;
				menuevent.data = data;
				
				dispatchEvent(menuevent);
			}
			
			/**
			 * 更新单项菜单背景颜色组件Rect的Y坐标
			 */
			private function updateBgRectY(y:Number):void
			{
				bgColor.visible ? null : bgColor.visible = true;
				new TweenLite(bgColor,.3,{y:y});
			}
			
			/**
			 * 更新菜单显示文本字体颜色
			 */
			private function updateTextStyle(color:uint, label:Label):void
			{
				if(label && label.name != "CURRENT")
				{
					label.setStyle("color",color);
				}
			}

			public function get datafield():String
			{
				return _datafield;
			}

			public function set datafield(value:String):void
			{
				_datafield = value;
			}

			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				creationCompleteMark ? initMenu() : null;
			}
							
		]]>
	</fx:Script>
	
	<s:Group id="bgColor" height="30" width="100%" visible="false">
		<s:Rect left="0" right="0" top="0" height="30">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xEEEEEE"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Rect left="0" top="0" height="30" width="4">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xDD4B39"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<s:Group x="30" id="content" width="100%" height="100%"/>
	
</s:Group>
