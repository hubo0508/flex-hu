<?xml version="1.0" encoding="utf-8"?>
<!--
	 @作者：HUBO
	 @创建时间：2011-12-26
	 @邮件：hubo.0508@gmail.com
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ns="library://FExt.HU"
		 height="200">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import org.hu.fextjs.components.Container;
			import org.hu.fextjs.components.RoundNode;
			
			//历史颜色
			private var historyOfColor:uint;
			
			//周末工作日背景
			private var weekendColor:uint = 0xF1F8FE;
			
			//坐标
			private var basePoint:Point=new Point();
			
			//取值key
			private var _field:String = "price";
			
			//列宽
			private var columnWidth:int = 16;
			
			//存储最大值与最小值
			private var numericalIdentification:Array;
			
			//是否周末
			private var weekendCount:int = 0;

			public function dataProvider(data:ArrayCollection):void
			{
				this.initChartContainer(data.length+3);
				this.draw(data);
			}
			
			private function initChartContainer(num:int):void
			{
				weekendCount = 0;
				for(var i:int=0; i<num; i++)
				{
					var contaier:Container;
					if(isWeekend()){
						contaier= this.createChildContainer(i+"",columnWidth,weekendColor);
					}else{
						contaier= this.createChildContainer(i+"",columnWidth);
					}
					
					this.chartContainer.addElement(contaier);
				}
			}
			
			private function isWeekend():Boolean
			{
				weekendCount++;
				if(weekendCount == 6 || weekendCount == 7)
				{
					if(weekendCount == 7){
						weekendCount = 0
					}
					return true;
				}
				return false;
			}
			
			protected function draw(data:ArrayCollection):void
			{
				if(data == null || data.length == 0) return;
				
				this.numericalIdentification  = this.getMaximumAndMinimumValues(data);
				
				chartLine.graphics.lineStyle(1, 0x0066DD, 1, false, LineScaleMode.VERTICAL, CapsStyle.NONE, JointStyle.MITER, 10);
				basePoint.x = columnWidth*0.5;
				
				var len:int=data.length;
				for(var i:int=0; i<len; i++)
				{					
					var item:Object = data.getItemAt(i);
					basePoint.y = this.getYAxisShowsValue(int(item[field]));				
					
					var node:RoundNode = new RoundNode();
					node.x = basePoint.x-node.width*0.5;
					node.y = basePoint.y-node.width*0.5;
					node.id = i+"";
					
					this.chartRound.addElement(node);
					
					if(i==0){
						chartLine.graphics.moveTo(basePoint.x ,basePoint.y);
					}
					
					chartLine.graphics.lineTo(basePoint.x ,basePoint.y);
					
					basePoint.x  = basePoint.x+columnWidth;
				}
			}
			
			private function getYAxisShowsValue(value:int):Number
			{
				var maximum:int = int(numericalIdentification["maximum"]);
				var chartContainerH:Number = chartContainer.height;
				if(maximum < chartContainerH || maximum > chartContainerH)
				{					
					return chartContainerH-((chartContainerH/maximum)*value)+30;
				}	
				
				if(maximum == chartContainerH)
				{
					return value;
				}	
				
				return 0;
			}
			
			private function getMaximumAndMinimumValues(data:ArrayCollection):Array
			{
				var maximum:int = 0;
				var minimum:int  = 0;
				var len:int = data.length;
				for(var i:int=0; i<len; i++)
				{
					var item:Object = data.getItemAt(i);
					var num:int = int(item[field]);
					
					maximum = maximum < num ? num : maximum;
					minimum = minimum < num ? minimum : num;
				}
				
				var arr:Array = [];
				arr["maximum"] = maximum;
				arr["minimum"] = minimum;
				
				return arr;
			}
			
			private function clearCacheColor(id:int):void
			{
				var upChartColumn:Container = this.chartContainer.getElementAt(id) as Container;
				if(upChartColumn.name == MouseEvent.ROLL_OVER)
				{
					upChartColumn.name = MouseEvent.ROLL_OUT;
					upChartColumn.backgroupColor = historyOfColor;
				}
			}
			
			protected function chartColumnRollHandler(event:MouseEvent):void
			{					
				var chartColumn:Container = event.currentTarget as Container;	
				this.clearCacheColor(int(chartColumn.id));				
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT:							
						chartColumn.backgroupColor = historyOfColor;		
						chartColumn.name  = MouseEvent.ROLL_OUT;
						break;
					
					case MouseEvent.ROLL_OVER:
						historyOfColor = chartColumn.backgroupColor;
						chartColumn.backgroupColor = 0xF9DFE0;		
						chartColumn.name = MouseEvent.ROLL_OVER;
						break;
					
					default:
						break;
				}
				chartColumn.invalidateDisplayList();					
				this.changeRoundStyle(int(chartColumn.id),event.type);			
			}	
			
			protected function changeRoundStyle(index:int, type:String):void
			{
				var roundNode:RoundNode = this.chartRound.getElementAt(index) as RoundNode;
				var upColor:uint = 0;
				switch(type)
				{
					case MouseEvent.ROLL_OUT:
						upColor = roundNode.solidColor;
						roundNode.solidColor = roundNode.contentColor;
						roundNode.contentColor = upColor;
						break;
					
					case MouseEvent.ROLL_OVER:					
						upColor = roundNode.solidColor;
						roundNode.solidColor = roundNode.contentColor;
						roundNode.contentColor = upColor;
						break;
					
					default:
						break;
				}
			}
			
			private function createChildContainer(index:String,width:Number,backgroupColor:uint = 0xFFFFFF):Container
			{				
				var container:Container = new Container();
				container.addEventListener(MouseEvent.ROLL_OVER,chartColumnRollHandler,false,0,true);
				container.addEventListener(MouseEvent.ROLL_OUT,chartColumnRollHandler,false,0,true);
				container.addEventListener(flash.events.FocusEvent.FOCUS_OUT,chartColumnFocusHandler,false,0,true);
				container.borderSides = "left right";
				container.percentHeight=100;
				container.width = width;				
				container.backgroupColor = backgroupColor;
				container.id = index;
				container.name = MouseEvent.ROLL_OUT;
				
				trace("index = " + index);
				
				return container;
			}
			
			protected function chartColumnFocusHandler(event:FocusEvent):void
			{

			}

			public function get field():String
			{
				return _field;
			}

			public function set field(value:String):void
			{
				_field = value;
			}

			
		]]>
	</fx:Script>

	<ns:HContainer id="chartContainer" borderColor="#CECECE" height="100%" gap="0" />
	
	<s:Group id="chartLine" height="{chartContainer.height}" width="{chartContainer.width}" />	
	<s:Group id="chartRound" height="{chartContainer.height}" width="{chartContainer.width}" />
	
</s:Group>
