<?xml version="1.0" encoding="utf-8"?>
<!--
	 @作者：HUBO
	 @创建时间：2011-12-5
	 @邮件：hubo.0508@gmail.com
-->
<components:HContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="org.hu.fextjs.components.*"
					   gap="1"
					   paddingLeft="0"
					   horizontalCenter="0">

	<fx:Metadata>
		[Style(name="titleBackgroupColor", type="uint", format="Color", inherit="yes", theme="spark")]
		[Style(name="titleBorderColor", type="uint", format="Color", inherit="yes", theme="spark")]
		[Style(name="titleBorderVisible", type="Boolean", inherit="no")]
	</fx:Metadata>
	
	<fx:Metadata>
		[Event(name="itemClick",type="org.hu.fextjs.event.GridEvent")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			
			import org.hu.fextjs.event.GridEvent;
			import org.hu.fextjs.ui.Renderer;
			
			import spark.components.CheckBox;

			private var _columns:Array;
			private var _mergeCells:Array;
			private var _dataProvider:Object;
			public var eventMark:String;//click mark
			public var historySelectRowsIndex:Array=[];
			public var selectItems:Array;
			private var _titleRowHeight:int = 0;
			private var _associationsChoose:Boolean = true;

			/*default style start*/
			private var rollOverColor:uint=0xB2E1FF;
			private var alternatingItemColors:Array=["#FFFFFF", "#F7F7F7"];
			private var verticalGridLines:Boolean;
			private var titleBorderVisible:Boolean=true;
			private var selectionColor:uint=0x7FCEFF;
			private var titleBackgroupColor:uint = 0xA8A8A8;
			/*default style end*/	

			override protected function createChildren():void
			{
				super.createChildren();
//				trace("+++++++++++++FDataGrid++++createChildren");
//				trace(this.getStyle("titleBackgroupColor"));
				this.createAndDisplayColumns();
			}
			
//			<ns:VContainer width="100%" height="60" gap="0">
//				<ns:VContainer backgroupColor="#919191" width="100%" height="30"/>
//				<ns:HContainer width="100%" height="30" gap="0">
//					<ns:VContainer backgroupColor="#919191" width="100%" height="30"/>
//					<ns:VContainer backgroupColor="#919191" width="100%" height="30"/>
//				</ns:HContainer>			
//			</ns:VContainer>

			/**
			 * 初始化单元格列数
			 */
			protected function createAndDisplayColumns():void
			{
				var len:int=_columns.length;
				for (var i:int=0; i < len; i++)
				{					
					var objColumn:Object = _columns[i];
					if (objColumn is FColumn || objColumn is FBoxColumn)
					{
						var cells:FCells=this.createCells(objColumn.headerText);
						cells.addEventListener(MouseEvent.ROLL_OUT,titleRowRollHandler,false,0,true);
						cells.addEventListener(MouseEvent.ROLL_OVER,titleRowRollHandler,false,0,true);
						cells.addEventListener(MouseEvent.CLICK,titleRowClickHandler,false,0,true);
						this.settingTitleCellsStyle(cells);
						
						if (objColumn.width == 0){
							cells.percentWidth=100;
							objColumn.percentWidth=100;
						}else{
							cells.width = objColumn.width;
						}
						
						if(titleRowHeight != 0){
							cells.height = titleRowHeight;
						}
						
						if(i == (len-1)){
							objColumn.borderSides = "";
						}
						
						objColumn.addElement(cells);
						objColumn.id=i + "";
						this.addElement(objColumn as IVisualElement);
					}
					else
					{
						this.addElement(objColumn as IVisualElement);
					}
				}
			}
			
			protected function titleRowRollHandler(event:MouseEvent):void
			{
				this.changeTitleCellsColor(event.currentTarget as FCells,event.type);
			}
			
			protected function titleRowClickHandler(event:MouseEvent):void
			{
				//do
			}
			
			/**
			 * 设置列表头样式
			 */
			private function settingTitleCellsStyle(cells:FCells):void
			{
				cells.borderColor=getBorderColor();

				var _titleBorderVisible:Boolean=this.getStyle("titleBorderVisible");
				if (_titleBorderVisible)
				{
					cells.borderSides="bottom";
				}
				else
				{
					cells.borderSides="";
				}

				cells.backgroupColor=this.getTitleBackgroupColor();
			}

			public function set dataProvider(value:Object):void
			{
				this._dataProvider=value;

				this.eachDataProvider();
			}

			/**
			 * 创建并显示数据
			 */
			protected function eachDataProvider():void
			{
				if (_dataProvider is ArrayCollection)
				{
					var ac:ArrayCollection=_dataProvider as ArrayCollection;
					var len:int=ac.length;
					for (var i:int=0; i < len; i++)
					{
						this.settingRowData(ac.getItemAt(i), i);
					}
				}
			}

			/**
			 * 根据行数据创建行单元格数据
			 *
			 * item:当前行数据
			 * rowIndex:当前行号
			 */
			protected function settingRowData(item:Object, rowIndex:int):void
			{
				var len:int=this.columns.length;
				for (var i:int=0; i < len; i++)
				{
					var objColumn:Object = _columns[i];
					if (objColumn is FColumn)
					{
						var column:FColumn=this.columns[i] as FColumn;
						if (column)
						{
							var cells:FCells;
//							if(column.customComponents){
//								cells =new FCells();
//								cells.id = rowIndex+"";
//								cells.addElement(column.customComponents);
//							}else{
								cells=getFCells(column, item, rowIndex, column.dataField);								
//							}		
							cells.addEventListener(MouseEvent.ROLL_OUT, cellsRollHandler, false, 0, true);
							cells.addEventListener(MouseEvent.ROLL_OVER, cellsRollHandler, false, 0, true);
							cells.addEventListener(MouseEvent.CLICK, cellsClickHandler, false, 0, true);
							column.addElement(cells);
						}
					}
					
					if(objColumn is FBoxColumn)
					{
						var boxColumn:FBoxColumn = this.columns[i] as FBoxColumn;
						if(boxColumn)
						{
							var boxCells:FCells = this.getBoxCells(boxColumn,rowIndex);
							boxCells.addEventListener(MouseEvent.ROLL_OUT, cellsRollHandler, false, 0, true);
							boxCells.addEventListener(MouseEvent.ROLL_OVER, cellsRollHandler, false, 0, true);
							boxCells.addEventListener(GridEvent.BOX_COLUMN_CHANGE,boxColumnChangeHandler,false,0,true);
							boxColumn.addElement(boxCells);
						}						
					}
				}
			}
			
			
			
			public function initContentRowEventListener(cells:FCells):void				
			{
				cells.addEventListener(MouseEvent.ROLL_OUT, cellsRollHandler, false, 0, true);
				cells.addEventListener(MouseEvent.ROLL_OVER, cellsRollHandler, false, 0, true);
				cells.addEventListener(MouseEvent.CLICK, cellsClickHandler, false, 0, true);
			}

			
			protected function boxColumnChangeHandler(event:GridEvent):void
			{				
				var len:int = this.columns.length;
				for(var i:int=0; i<len; i++)
				{
					var boxColumn:FBoxColumn = this.columns[i] as FBoxColumn;
					if(boxColumn)
					{
						var cells:FCells = boxColumn.getElementAt(int(event.selectRowsIndex[0])) as FCells;						
						if(cells.selected)
						{						
							if(boxColumn.radio){							
								this.changeBoxSelected(false,boxColumn);
								this.restoreLineColor();
								this.changeRecoredIndex(event.selectRowsIndex[0],"newvalue");
								this.changeBoxSelected(true,boxColumn);																
								this.changeRowsColor(cells,MouseEvent.CLICK);		
							}else{
								this.changeRecoredIndex(event.selectRowsIndex[0],"push");
								this.eventMark=event.type;
								this.changeRowsColor(cells, MouseEvent.CLICK);
							}
						}
						else
						{							
							this.changeRecoredIndex(event.selectRowsIndex[0],"remove");
							this.restoreLineColorByRowIndex(event.selectRowsIndex[0]);
						}
						
						break;
					}					
				}		
				
				this.selectItems = this.getSelectionValue();
				this.dispatchItemClick();
			}
	
			/**
			 * 创建统一样式单元格
			 */
			public function getFCells(column:FColumn, item:Object, rowIndex:int, dataField:String):FCells
			{
				var cells:FCells=this.createCells(item[dataField]);
				cells.backgroupColor=this.getRowColors(rowIndex);
				cells.borderSides="";
				if (column.percentWidth == 100)
				{
					cells.percentWidth=100;
				}
				else
				{
					cells.width=column.width;
				}
				cells.id=rowIndex + "";

				return cells;
			}
			
			public function getBoxCells(column:FBoxColumn,rowIndex:int):FCells
			{
				var cells:FCells = new FCells();
				cells.type = column.boxType;
				cells.backgroupColor=this.getRowColors(rowIndex);
				cells.borderSides="";
				if (column.percentWidth == 100)
				{
					cells.percentWidth=100;
				}
				else
				{
					cells.width=column.width;
				}
				cells.id=rowIndex + "";
				
				return cells;
			}


			/**
			 * 1、取得当前行值
			 * 2、设置当前行选择中颜色
			 */
			protected function cellsClickHandler(event:MouseEvent):void
			{
				var cells:FCells = event.currentTarget as FCells;
				var rowIndex:int = int(cells.id)+1;
				if(cells.selectionColorMark)
				{
					this.restoreLineColorByRowIndex(rowIndex);
					this.changeBoxSelectedByRowIndex(false,rowIndex);
					this.changeRecoredIndex(rowIndex,"remove");
				}
				else
				{
					this.eventMark=event.type;
					var boxColumn:FBoxColumn = this.getBoxColumn();
					if(!boxColumn.radio && boxColumn.rowMultiSelection){						
						this.changeRecoredIndex(rowIndex,"push");
						this.changeBoxSelectedByRowIndex(true,rowIndex);
					}else{
						this.changeBoxSelected(false);
						this.restoreLineColor();	
						this.changeRecoredIndex(rowIndex,"newvalue");
						this.changeBoxSelected(true);						
					}						
					this.changeRowsColor(cells, event.type);
					this.selectItems = this.getSelectionValue();
					this.dispatchItemClick();	
				}				
			}

			public function dispatchItemClick():void
			{
				var e:GridEvent = new GridEvent(GridEvent.ITEM_CLICK);
				e.selectItems = this.selectItems;
				e.selectRowsIndex = historySelectRowsIndex;
				
				this.dispatchEvent(e);
			}			
			
			/**
			 * 1、鼠标移入，移出单元格时，更新背景颜色
			 * 2、同时更新当前行的颜色
			 */
			protected function cellsRollHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER:
						if (eventMark == MouseEvent.CLICK)
						{
							this.eventMark=event.type;
						}
						else
						{
							eventMark="";
						}
						break;
					
					case MouseEvent.ROLL_OUT:
						if (eventMark == MouseEvent.CLICK)
						{
							eventMark="";
							return;
						}
						break;
					
					default:
						break;
				}
				
				this.changeRowsColor(event.currentTarget as FCells, event.type);				
			}
			
			/**
			 * 根据行索引取得单元格值
			 */
			public function getColumnValueByRowIndex(rowIndex:Array,column:FColumn,target:Array = null):Array
			{
				var array:Array = [];
				
				var len:int = rowIndex.length;
				for(var i:int=0; i<len; i++)
				{
					var cells:FCells = column.getElementAt(rowIndex[i]) as FCells;
					if(target && target[i])
					{
						var obj:Object = target[i];
						obj[column.dataField] = cells.text;
					}
					else
					{
						array.push(column.dataField,cells.text);
					}					
				}
				
				return target == null ? array : target;
			}
			
			/**
			 * 取得所有组件自定义值
			 */
			public function getSelectionValue():Array
			{
				var array:Array = [];
				var len:int = historySelectRowsIndex.length;
				var lenColumns:int=columns.length;
				for (var j:int=0; j < len; j++)
				{
					var obj:Object = new Object();
					for (var i:int=0; i < lenColumns; i++)
					{
						var column:FColumn=columns[i] as FColumn;
						if (column)
						{
							var cells:FCells = column.getElementAt(historySelectRowsIndex[j]) as FCells;
							obj[column.dataField] = cells.text;							
						}
					}
					array.push(obj);
				}
				
				return array;
			}
			
			/**
			 * 改变标题呢行背景颜色
			 */
			public function changeTitleCellsColor(cells:FCells, eventtype:String):void
			{								
				var _rollOverColor:uint=this.getRollOverColor();				
				var _titleBackgroupColor:uint = this.getTitleBackgroupColor();
				
				if (MouseEvent.ROLL_OVER == eventtype)
				{
					cells.backgroupColor=_rollOverColor;
					cells.invalidateDisplayList();
				}
				else if (MouseEvent.ROLL_OUT == eventtype)
				{
					cells.backgroupColor=_titleBackgroupColor;
					cells.invalidateDisplayList();
				}
			}

			/**
			 * 改变内容行背景颜色
			 */
			public function changeRowsColor(cells:FCells, eventtype:String):void
			{
				var _selectionColor:uint=this.getSelectionColor();
				var _rollOverColor:uint=this.getRollOverColor();
	
				var len:int=columns.length;
				for (var i:int=0; i < len; i++)
				{
					var sibingColumn:Object=columns[i];
					if (sibingColumn is FColumn || sibingColumn is FBoxColumn)
					{
						var rowIndex:int=int(cells.id) + 1;
						var siblingCell:FCells=sibingColumn.getElementAt(rowIndex) as FCells;
						if (MouseEvent.ROLL_OUT == eventtype)
						{
							if (cells.selectionColorMark)
							{
								siblingCell.backgroupColor=_selectionColor;
							}
							else
							{
								siblingCell.backgroupColor=this.getRowColors(rowIndex - 1);
							}
							siblingCell.invalidateDisplayList();
						}
						else if (MouseEvent.ROLL_OVER == eventtype)
						{
							siblingCell.backgroupColor=_rollOverColor;
							siblingCell.invalidateDisplayList();
						}
						else if (MouseEvent.CLICK == eventtype)
						{
							siblingCell.backgroupColor=_selectionColor;
							siblingCell.selectionColorMark=true;
							siblingCell.invalidateDisplayList();
						}
					}
				}
			}

			/**
			 * 还原选择中行颜色
			 */
			private function restoreLineColor():void
			{
				for (var j:int=0; j < historySelectRowsIndex.length; j++)
				{
					var rowIndex:int=historySelectRowsIndex[j];
					this.restoreLineColorByRowIndex(rowIndex);
				}
			}
			
			private function restoreLineColorByRowIndex(rowIndex:int):void
			{
				var len:int=columns.length;
				for (var i:int=0; i < len; i++)
				{
					var objColumn:Object=columns[i];
					if (objColumn is FColumn || objColumn is FBoxColumn )
					{
						var designateCell:FCells=objColumn.getElementAt(rowIndex) as FCells;
						designateCell.backgroupColor=getRowColors(rowIndex+1);
						designateCell.selectionColorMark=false;
						designateCell.invalidateDisplayList();
					}
				}
			}
			
			private function changeBoxSelected(state:Boolean,boxColumn:FBoxColumn = null):void
			{				
				boxColumn = boxColumn || this.getBoxColumn();
				var len:int = historySelectRowsIndex.length;
				for (var j:int=0; j < len; j++)
				{
					var rowIndex:int = historySelectRowsIndex[j];
					this.changeBoxSelectedByRowIndex(state,rowIndex,boxColumn);
				}
			}
			
			private function changeBoxSelectedByRowIndex(state:Boolean,rowIndex:int,boxColumn:FBoxColumn = null):void
			{
				boxColumn = boxColumn || this.getBoxColumn();			
				var cells:FCells = boxColumn.getElementAt(rowIndex) as FCells;
				if(cells.selected != state)
				{
					(cells.getElementAt(0) as CheckBox).selected = state;
					//cells.selected = state;
				}
			}
			
			private function changeRecoredIndex(rowIndex:int,type:String = "push",rowIndexArr:Array = null):void
			{
				if(type == "remove")
				{
					var len:int = this.historySelectRowsIndex.length;
					for(var i:int=0; i<len; i++)
					{
						var oldRowIndex:int = int(this.historySelectRowsIndex[i]);
						if(oldRowIndex == rowIndex){
							this.historySelectRowsIndex.slice(i,1);
							break;
						}
					}
					return;
				}
				if(type == "push")
				{
					this.historySelectRowsIndex.push(rowIndex);
					return;
				}
				if(type == "newvalue")
				{
					if(rowIndexArr){
						this.historySelectRowsIndex = rowIndexArr;
					}else{
						this.historySelectRowsIndex = [rowIndex];
					}				
					return;
				}
			}
			
			private function getBoxColumn():FBoxColumn
			{
				var boxColumn:FBoxColumn;
				var lenColumns:int=columns.length;
				for (var i:int=0; i < lenColumns; i++)
				{
					boxColumn=columns[i] as FBoxColumn;
					if (boxColumn)
					{
						break;
					}
				}
				return boxColumn;
			}
			
			private function getSelectionColor():uint
			{
				var _selectionColor:uint=getStyle("selectionColor");
				_selectionColor=_selectionColor == 0 ? selectionColor : _selectionColor;
				return _selectionColor;
			}
			
			private function getRollOverColor():uint
			{
				var _rollOverColor:uint=getStyle("rollOverColor");
				_rollOverColor=_rollOverColor == 0 ? rollOverColor : _rollOverColor;
				return _rollOverColor;
			}
			
			private function getTitleBackgroupColor():uint
			{
				var _titleBackgroupColor:uint = getStyle("titleBackgroupColor");
				_titleBackgroupColor=_titleBackgroupColor == 0 ? titleBackgroupColor : _titleBackgroupColor;
				return _titleBackgroupColor;
			}
			
			private function getBorderColor():uint
			{
				var _borderColor:uint=this.getStyle("borderColor");
			 	_borderColor == 0 ? borderColor : _borderColor;
				return _borderColor;
			}
			
			/**
			 * 根据列表行索引取得该行所有行单元格
			 */
			private function getRowCellsByRowIndex(rowsIndex:int):Array
			{
				var rowCells:Array = [];
				var len:int=columns.length;
				for (var i:int=0; i < len; i++)
				{
					var column:FColumn=columns[i] as FColumn;
					if (column)
					{
						rowCells.push(column.getElementAt(rowsIndex));
					}
				}
				return rowCells;
			}
			
			/**
			 * 根据列表行索引取行颜色值
			 */
			public function getRowColors(rowIndex:int):uint
			{
				var _alternatingItemColors:Array=this.getStyle("alternatingItemColors");
				_alternatingItemColors=_alternatingItemColors.length == 0 ? alternatingItemColors : _alternatingItemColors;

				if (rowIndex >= 0 && rowIndex <= 9)
				{
					return getItemColorsByIndex(_alternatingItemColors, rowIndex);
				}
				else
				{
					var rowIndexStr:String=rowIndex.toString();
					rowIndex=int(rowIndexStr.substr(rowIndexStr.length - 1));
					return getItemColorsByIndex(_alternatingItemColors, rowIndex);
				}
			}
			
			/**
			 * 根据行索引得到奇、偶数颜色值
			 */
			private function getItemColorsByIndex(_alternatingItemColors:Array, index:int):uint
			{
				if (index == 0 || index == 2 || index == 4 || index == 6 || index == 8)
				{
					return _alternatingItemColors[0] as uint;
				}
				else
				{
					return _alternatingItemColors[1] as uint;
				}
			}

			/**
			 * 创建单元
			 */
			private function createCells(text:String):FCells
			{
				var column:FCells=new FCells();
				column.text=text;

				return column;
			}
	

			public function set columns(value:Array):void
			{
				_columns=value;
			}

			public function get dataProvider():Object
			{
				return _dataProvider;
			}

			public function get columns():Array
			{
				return _columns;
			}

			public function get titleRowHeight():int
			{
				return _titleRowHeight;
			}

			public function set titleRowHeight(value:int):void
			{
				trace("_titleRowHeight");
				_titleRowHeight = value;
			}

			public function get mergeCells():Array
			{
				return _mergeCells;
			}

			public function set mergeCells(value:Array):void
			{
				_mergeCells = value;
			}

			public function get associationsChoose():Boolean
			{
				return _associationsChoose;
			}

			public function set associationsChoose(value:Boolean):void
			{
				_associationsChoose = value;
			}

			
		]]>
	</fx:Script>
	
</components:HContainer>
