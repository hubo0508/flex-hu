<?xml version="1.0" encoding="utf-8"?>
<!--
	 @作者：HUBO
	 @创建时间：2011-12-5
	 @邮件：hubo.0508@gmail.com
-->
<components:HContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="org.hu.fextjs.components.*"
					   gap="0"
					   horizontalCenter="0"
					   width="100%"
					   height="100%"
					   borderSides="left right top bottom">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import org.hu.fextjs.event.CellsMouseEvent;
			
			private var _columns:Array;
			private var _dataProvider:Object;
			
			private var _fmouseOutColor:uint = 0xA8A8A8;
			private var _fmouseOverColor:uint = 0xCEDBEF;			
			private var _fborderColor:uint=0x696969;			
			private var _fbackgroupColor:uint = 0xA8A8A8;
			
			
		
			
			public function set dataProvider(value:Object):void
			{
				this._dataProvider = value;
				
				this.eachDataProvider();
			}
			
			protected function eachDataProvider():void
			{
				if(_dataProvider is ArrayCollection)
				{
					var ac:ArrayCollection = _dataProvider as ArrayCollection;
					var len:int = ac.length;
					for(var i:int=0; i<len; i++)
					{
						this.settingRowData(ac.getItemAt(i),i);
					}
				}
			}
			
			protected function settingRowData(item:Object,rowIndex:int):void
			{
				var len:int = this.columns.length;
				for(var i:int=0; i<len; i++)
				{
					var column:FDGColumn = this.columns[i] as FDGColumn;
					if(column){
						var cells:FCells = this.getCells(item[column.dataField]);
						if(column.percentWidth == 100){
							cells.percentWidth = 100;
						}
						cells.id = rowIndex+"";
						cells.addEventListener(CellsMouseEvent.EVENT_TYPE,cellsMouseEvent,false,0,true);
						column.addElement(cells);
					}					
				}
			}

			protected function cellsMouseEvent(event:CellsMouseEvent):void
			{
				var currentCells:FCells = event.currentTarget as FCells;
				var column:FDGColumn = currentCells.parent as FDGColumn;						
				var len:int = columns.length;

				for(var i:int=0; i<len; i++)
				{
					var sibingColumn:FDGColumn = columns[i] as FDGColumn;
					if(sibingColumn && sibingColumn.id != column.id){	
						var at:int = int(currentCells.id)+1;
						var siblingCell:FCells =	sibingColumn.getElementAt(at) as FCells;
						if(MouseEvent.MOUSE_OUT  == event.types){
							siblingCell.changeBackgroupColor(currentCells.mouseOutColor);
						}else{
							siblingCell.changeBackgroupColor(currentCells.mouseOverColor);
						}
						
						//this.settingCellsStyle(cells,column);
						//siblingCell.invalidateDisplayList();
					}					
				}
			}
			
			private function getCells(text:String):FCells
			{
				var column:FCells	= new FCells();
				column.text = text;
				
				return column;
			}
			
			public function set columns(value:Array):void
			{
				_columns = value;
				
				var len:int = _columns.length;
				for(var i:int=0; i<len; i++){
					var column:FDGColumn = value[i] as FDGColumn;
					if(column){
						var cells:FCells = this.getCells(column.headerText);
						this.settingCellsStyle(cells,column);
						if(column.width == 0){
							cells.percentWidth = 100;
							column.percentWidth = 100;
						}
						column.addElement(cells);
						column.id = i+"";
						this.addElement(column);
					}else{
						this.addElement(value[i]);
					}					
				}
			}
			
			public function settingCellsStyle(cells:FCells,column:FDGColumn):void
			{
				cells.mouseOutColor = fmouseOutColor;
				cells.mouseOverColor = fmouseOverColor;
				cells.backgroupColor = fbackgroupColor;
				cells.borderColor = fborderColor;
			}

			public function get dataProvider():Object
			{
				return _dataProvider;
			}
			
			public function get columns():Array
			{
				return _columns;
			}
			
			public function get fbackgroupColor():uint
			{
				return _fbackgroupColor;
			}
			
			public function set fbackgroupColor(value:uint):void
			{
				_fbackgroupColor = value;
			}
			
			public function get fborderColor():uint
			{
				return _fborderColor;
			}
			
			public function set fborderColor(value:uint):void
			{
				_fborderColor = value;
			}
			
			public function get fmouseOverColor():uint
			{
				return _fmouseOverColor;
			}
			
			public function set fmouseOverColor(value:uint):void
			{
				_fmouseOverColor = value;
			}
			
			public function get fmouseOutColor():uint
			{
				return _fmouseOutColor;
			}
			
			public function set fmouseOutColor(value:uint):void
			{
				_fmouseOutColor = value;
			}
			
			
		]]>
	</fx:Script>
</components:HContainer>
