<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-6-6</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:child="com.hubo.workflow.ui.child.*"
		 creationComplete="init()"
		 width="100%"
		 height="100%" xmlns:ui="com.hubo.workflow.ui.*">
	
	<fx:Script>
		<![CDATA[
			import com.hubo.workflow.event.ClickTopNavMenuEvent;
			import com.hubo.workflow.event.CreateElementLineEvent;
			import com.hubo.workflow.event.CreateElementNodeEvent;
			import com.hubo.workflow.ui.child.AlignmentTools;
			import com.hubo.workflow.ui.child.ConfigTools;
			import com.hubo.workflow.ui.child.ElementLine;
			import com.hubo.workflow.ui.child.ElementNode;
			import com.hubo.workflow.util.Global;
			import com.hubo.workflow.util.UIUtil;
			
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			
			/**
			 * 对创建元素节点进行计数 
			 */
			private var countnode:int = 1;
			
			private var thisLine:ElementLine;
			
			/**
			 * 是否显示网络
			 */
			private var gridMark:Boolean = true;
			
			private function init():void 
			{
				this.initEventListener();
			}
			
			/**
			 * 初始事件监听
			 */
			private function initEventListener():void
			{
				workflowGroup.addEventListener(MouseEvent.CLICK,  drawLineHandler,false,0,true);  
				workflowGroup.addEventListener(MouseEvent.MOUSE_MOVE,  drawLineHandler,false,0,true); 
				iconTools.addEventListener(CreateElementNodeEvent.CREATE_ELEMENT_NODE,createElementNodeHandler,false,0,true);
				topNavigation.addEventListener(ClickTopNavMenuEvent.CLICK_NAV_MENU,clickTopNavigationMenuHandler,false,0,true);
			}
			
			protected function clickTopNavigationMenuHandler(event:ClickTopNavMenuEvent):void
			{
				switch(event.name)
				{
					case TopNavigation.ALIGNMENT :
						break;
					
					case TopNavigation.CANCEL :
						break;
					
					case TopNavigation.GRID :
						if(event.selected && gridMark == false)
						{
							Global.drawBackgroundGrid(grid,grid.width,grid.height);
							gridMark = true;
						}
						if(event.selected == false && gridMark)
						{
							grid.graphics.clear();
							gridMark = false;
						}
						break;
					
					case TopNavigation.LOG :
						bottomNavigation.showOrHide();
						break;
					
					case TopNavigation.SAVE :
						break;
					
					case TopNavigation.VERIFICATION :
						break;
					
					case TopNavigation.ZOOM :
						break;
					
					default:
						break;
				}
			}
			
		
			
			/**
			 * 开始画线
			 */
			protected function createElementLineHandler(event:CreateElementLineEvent):void
			{
				this.workflowGroup.addElement(event.line);
				event.line.setEndPoint(stageMousePoint());
				event.line.draw();
				
				thisLine = event.line;
				
				var index:int = getElementNodeIndexBySID(event.upElementNodeSID);
				this.workflowGroup.setElementIndex(event.line,index);
			}
			
			/**
			 * 某个元素节点 的鼠标事件处理
			 */
			protected function elementNodeHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER :
						this.drawLastLine(event.currentTarget as ElementNode, this.thisLine);
						break;
					
					case MouseEvent.CLICK :
						this.drawLastLine(event.currentTarget as ElementNode,this.thisLine);
						break;
					
					default:
						break;
				}
			}
			
			private function drawLastLine(elementNode:ElementNode, elementLine:ElementLine):void
			{
				if(elementLine == null)return;
				
				elementNode.addAssociatedLines(elementLine,false);
				elementNode.refreshArrow();
				elementLine.addAssociatedElementNode(elementNode);
				this.stopDrawLine();
			}
			
			/**
			 * 画线
			 */
			protected function drawLineHandler(event:MouseEvent):void
			{
				//this.junit.writeLog(new Point(this.stage.mouseX, this.stage.mouseY));
				switch(event.type)
				{
					case MouseEvent.CLICK :
						//结束当前画线，鼠标必须单击某个元素节点，否则删除当前线
						if(event.target is Group && event.currentTarget is Group)
						{
							this.removeLine();
						}
						break;
					
					case MouseEvent.MOUSE_MOVE :
						if(thisLine)
						{
							thisLine.setEndPoint(new Point(event.stageX-2,event.stageY-2));
							thisLine.draw();
						}
						break;
					
					default :
						break;
				}
			}
			
			private function stopDrawLine():void
			{
				thisLine = null;
			}
			
			private function removeLine():void
			{
				if(this.thisLine == null)return;
				
				for(var i:int=0, num:int=workflowGroup.numElements; i<num; i++)
				{
					var line:ElementLine = workflowGroup.getElementAt(i) as ElementLine;
					if(line && line == this.thisLine)
					{
							workflowGroup.removeElement(line);
							line.clear();
							this.stopDrawLine();
							break;
					}
				}
			}
			
			
			/**
			 * 调用底层API画背景网格
			 */
			override protected function updateDisplayList(w:Number, h:Number):void
			{
				super.updateDisplayList(w,h);
				if(gridMark)
				{
					Global.drawBackgroundGrid(grid,w,h);
				}
			}
			
	
			
			/**
			 * 点击级件（IconTools）工具栏时，创建元素节点
			 */
			protected function createElementNodeHandler(event:CreateElementNodeEvent):void
			{
				var node:ElementNode = event.node;
				node.addEventListener(CreateElementLineEvent.CREATE_ELEMENT_LINE, createElementLineHandler,false,0,true);
				node.addEventListener(MouseEvent.CLICK,elementNodeHandler,false,0,true);
				node.addEventListener(MouseEvent.ROLL_OVER,elementNodeHandler,false,0,true);
				node.SID = this.countnode;
				workflowGroup.addElement(node);
				
				this.countnode ++;
			}
			
			/**
			 * 根据SID在容器中查找元素节点
			 */
			private function getElementNodeBySID(sid:int):ElementNode
			{
				var ele:ElementNode;
				for(var i:int=0, num:int=workflowGroup.numElements; i<num; i++)
				{
					var node:ElementNode = workflowGroup.getElementAt(i) as ElementNode;
					if(node && node.SID == sid)
					{
						ele = node;
						break;
					}
				}
				
				return ele;
			}
			
			/**
			 * 根据SID在容器中查找元素节点的索引值 
			 */
			private function getElementNodeIndexBySID(sid:int):int
			{
				var index:int;
				for(var i:int=0, num:int=workflowGroup.numElements; i<num; i++)
				{
					var node:ElementNode = workflowGroup.getElementAt(i) as ElementNode;
					if(node && node.SID == sid)
					{
						index = i;
						break;
					}
				}
				
				return index;
			}
			
			/**
			 * 取得当前舞台鼠标x,y点坐标
			 */
			private function stageMousePoint():Point
			{
				return new Point(this.stage.mouseX, this.stage.mouseY);
			}

		]]>
	</fx:Script> 
	<mx:UIComponent id="grid" width="100%" height="100%"/>
	
	<s:Scroller width="100%" height="100%" minWidth="0" minHeight="0" skinClass="com.hubo.workflow.skin.Scroller_skin">
		<s:Group id="workflowGroup" width="100%" minHeight="0" minWidth="0"  top="122" bottom="23"  height="100%"/>
	</s:Scroller>
	
	<child:IconTools id="iconTools"/>
	
	<!--
	<child:Junit id="junit" left="0" bottom="0"/>
	<child:Config/>--> 
	
	<ui:TopNavigation id="topNavigation"/>
	
	<ui:BottomNavigation id="bottomNavigation"/>

</s:Group>
