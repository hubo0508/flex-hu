<?xml version="1.0" encoding="utf-8"?>
<!--
	 <p><b>auth：</b>HUBO</p>
	 <p><b>create-time：</b>2012-6-6</p>
	 <p><b>mail：</b>hubo.0508ⓐgmail.com	</p>
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:child="com.hubo.workflow.ui.child.*"
		 xmlns:ui="com.hubo.workflow.ui.*"
		 creationComplete="creationComplete()"
		 width="100%"
		 height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.hubo.workflow.components.NodeImage;
			import com.hubo.workflow.components.graphic.Round;
			import com.hubo.workflow.event.ClickTopNavMenuEvent;
			import com.hubo.workflow.event.CreateElementLineEvent;
			import com.hubo.workflow.event.CreateElementNodeEvent;
			import com.hubo.workflow.ui.child.AlignmentTools;
			import com.hubo.workflow.ui.child.ConfigTools;
			import com.hubo.workflow.ui.child.ElementLine;
			import com.hubo.workflow.ui.child.ElementNode;
			import com.hubo.workflow.util.Global;
			import com.hubo.workflow.util.UIUtil;
			
			import mx.controls.Image;
			import mx.controls.LinkButton;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			
			import spark.components.Label;
			import spark.primitives.BitmapImage;
			
			/**
			 * 实例化元素节点总数，每个元素节点的【ElementNode.SID】值等与当前记数值
			 */
			private var countnode:int = 1;
			
			private var thisLine:ElementLine;
			
			/**
			 * 是否显示网格，默认值true，显示网格
			 */
			private var showOrHideGrid:Boolean = true;
			
			/**
			 * 鼠标点击舞台不松开，拖动鼠标时，记录第一次点击的
			 */
			private var drawBgRectPoint:Point;
			
			/**
			 * 点击鼠标画背景矩形时，是否反方向画
			 */
			private var drawRectMark:Boolean = false;
			
			public var round:Round;
			
			private function creationComplete():void 
			{
				this.initEventListener();
			}
			
			/**
			 * 初始事件监听
			 */
			private function initEventListener():void
			{
				workflowContent.addEventListener(MouseEvent.CLICK,  drawLineHandler,false,0,true);  
				workflowContent.addEventListener(MouseEvent.MOUSE_MOVE,  drawLineHandler,false,0,true); 
				
				iconTools.addEventListener(CreateElementNodeEvent.CREATE_ELEMENT_NODE,createElementNodeHandler,false,0,true);
				
				topNavigation.addEventListener(ClickTopNavMenuEvent.CLICK_NAV_MENU,clickTopNavigationMenuHandler,false,0,true);
				topNavigation.addEventListener(AlignmentTools.CLICK_ALIGNMENT_TOOLS, clickAlignmentToolsHandler,false,0,true);
				
				this.addEventListener(MouseEvent.MOUSE_DOWN, mainviewMouseHandler, false, 0, true);
				this.addEventListener(MouseEvent.MOUSE_UP, mainviewMouseHandler, false, 0, true);
				this.addEventListener(MouseEvent.MOUSE_MOVE, mainviewMouseHandler, false, 0, true);
				this.addEventListener(MouseEvent.CLICK,mainviewMouseHandler,false,0,true);

				this.parentApplication.addEventListener(MouseEvent.MOUSE_UP,applicationMouseUpHandler,false,0,true);
			}
			
			private function applicationMouseUpHandler(event:MouseEvent):void
			{
				if(round.visible == false)
				{
					return;	
				}
				var node:ElementNode = workflowContent.getElementNodeBySID(this.round.SID);
				if(node.x != round.x || node.y != round.y)
				{
					node.x = round.x;
					node.y = round.y;
					node.refreshLine();
				}
				round.visible = false;
				round.SID = -1;
				round.stopDrag();
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				if(round == null)
				{
					round = new Round();
					round.visible = false;
					
					this.addElement(round);
				}
			}
			
			/**
			 * 点击对齐工具栏处理
			 */
			protected function clickAlignmentToolsHandler(event:DynamicEvent):void
			{
				switch(event.name)
				{
					case AlignmentTools.LAYERS_TOP :
						var point:Point = workflowContent.getNodePointBy(WorkflowContent.HORIZONTAL,WorkflowContent.FIRST_ELEMENT);
						workflowContent.updateAllHorizontalPointY(point.y);
						break;
					
					case AlignmentTools.LAYERS_CENTER :
						break;
					
					case AlignmentTools.LAYERS_BOTTOM :
						break;
					
					case AlignmentTools.LAYERS_LEFT :
						var point2:Point = workflowContent.getNodePointBy(WorkflowContent.HORIZONTAL, WorkflowContent.FIRST_ELEMENT);
						workflowContent.updateAllHorizontalPointX(point2.x);
						break;
					
					case AlignmentTools.LAYERS_MIDDLE :
						break;
					
					case AlignmentTools.LAYERS_RIGHT :
						var point3:Point = workflowContent.getNodePointBy(WorkflowContent.HORIZONTAL, WorkflowContent.LAST_ELEMENT);
						workflowContent.updateAllHorizontalPointX(point3.x);
						break;
					
					default:
						break;
				}
			}
			
			protected function mainviewMouseHandler(event:MouseEvent):void
			{
				if(event.target is WorkflowContent || UIUtil.getID(event.target) == "bgRect")
				{
					switch(event.type)
					{
						case MouseEvent.CLICK :
							drawRectMark ? null  : workflowContent.removeSlectedState();
							drawRectMark  = false;
							break;
						
						case MouseEvent.MOUSE_DOWN :
							drawBgRectPoint = new Point(this.stage.mouseX,this.stage.mouseY);
							break;
						
						case MouseEvent.MOUSE_UP:
							drawBgRectPoint = null;
							bgRect.graphics.clear();
							trace("MouseEvent.MOUSE_UP");
							break;
						
						case MouseEvent.MOUSE_MOVE :
							if(drawBgRectPoint == null)break;
							
							var dx:Number = stage.mouseX - drawBgRectPoint.x;
							var dy:Number = stage.mouseY - drawBgRectPoint.y;
							
							bgRect.graphics.clear();
							bgRect.graphics.beginFill(0x3399FF, 0.1);
							bgRect.graphics.lineStyle(1,0x3399FF);
							bgRect.graphics.drawRect(drawBgRectPoint.x,drawBgRectPoint.y,dx,dy);
							
							this.locationElementNodes();
							break;
						
						default:
							break;
					}
				}
			}
			
			private function locationElementNodes():void
			{
				for(var i:int=0, num:int=workflowContent.numElements; i<num; i++)
				{
					var elementNode:ElementNode = workflowContent.getElementAt(i) as ElementNode;
					if(elementNode)
					{
						var point:Point = elementNode.point();
						//右下角 => 左上角  
						var invertSelection:Boolean = (point.x > stage.mouseX && point.x < drawBgRectPoint.x) && (point.y > stage.mouseY && point.y < drawBgRectPoint.y);
						//左上角 => 右下角
						var isSelected:Boolean = (point.x >drawBgRectPoint.x && point.x <stage.mouseX) && (point.y > drawBgRectPoint.y && point.y < stage.mouseY);
						//右上角 => 左下角
						var right2:Boolean = (point.x < drawBgRectPoint.x && point.x > stage.mouseX) && (point.y > drawBgRectPoint.y && point.y < stage.mouseY)
						//左下角 => 右上角
						var left2:Boolean = (point.x > drawBgRectPoint.x && point.x < stage.mouseX) && (point.y < drawBgRectPoint.y && point.y > stage.mouseY)
						//设置选择状态
						invertSelection ||	isSelected || right2 || left2 ? elementNode.selectedState(true) : elementNode.selectedState(false);
						invertSelection || right2 || left2 ? drawRectMark = true : null;
						
						trace("invertSelection = " + invertSelection);
						trace("drawBgRectPoint.x="+drawBgRectPoint.x + "  y="+drawBgRectPoint.y);
						trace("stage.x="+stage.mouseX+"  y="+stage.mouseY);
						trace("elementNode.x="+elementNode.point().x + "  y="+elementNode.point().y);
						trace("");
					}
				}
			}
			
			protected function clickTopNavigationMenuHandler(event:ClickTopNavMenuEvent):void
			{
				switch(event.name)
				{
					case TopNavigation.ALIGNMENT :
						break;
					
					case TopNavigation.CANCEL :
						break;
					
					case TopNavigation.GRID :
						if(event.selected && showOrHideGrid == false)
						{
							Global.drawBackgroundGrid(grid,grid.width,grid.height);
							showOrHideGrid = true;
						}
						if(event.selected == false && showOrHideGrid)
						{
							grid.graphics.clear();
							showOrHideGrid = false;
						}
						break;
					
					case TopNavigation.LOG :
						bottomNavigation.showOrHide();
						break;
					
					case TopNavigation.SAVE :
						break;
					
					case TopNavigation.VERIFICATION :
						break;
					
					case TopNavigation.ZOOM :
						break;
					
					default:
						break;
				}
			}

			/**
			 * 开始画线
			 */
			protected function createElementLineHandler(event:CreateElementLineEvent):void
			{
				this.workflowContent.addElement(event.line);
				event.line.setEndPoint(stageMousePoint());
				event.line.draw();
				
				thisLine = event.line;
				
				var index:int = workflowContent.getElementNodeIndexBySID(event.upElementNodeSID);
				this.workflowContent.setElementIndex(event.line,index);
			}
			
			/**
			 * 某个元素节点 的鼠标事件处理
			 */
			protected function elementNodeHandler(event:MouseEvent):void
			{
				var node:ElementNode = event.currentTarget as ElementNode;
				switch(event.type)
				{
					case MouseEvent.ROLL_OVER :
						this.drawLastLine(node, this.thisLine);
						break;
					
					case MouseEvent.CLICK :
						this.drawLastLine(node,this.thisLine);
						break;
					
					case MouseEvent.MOUSE_DOWN :
						round.x = node.x;
						round.y = node.y;
						round.visible = true;
						round.SID = node.SID;
						round.startDrag();
						break;
					
					default:
						break;
				}
			}
			
			private function drawLastLine(elementNode:ElementNode, elementLine:ElementLine):void
			{
				if(elementLine == null)return;
				
				elementNode.addAssociatedLines(elementLine,false);
				elementNode.refreshArrow();
				elementLine.addAssociatedElementNode(elementNode);
				
				//initLineLabel(thisLine);
				
				this.stopDrawLine();
			}
			
			private function initLineLabel(line:ElementLine):void
			{
				var dx:Number = line.getStartPoint().x - line.getEndPoint().x;
				var dy:Number = line.getStartPoint().y - line.getEndPoint().y;
				var dist:Number=Math.sqrt(dx * dx + dy * dy);
				var odx:Number = dx*0.5;
				var ody:Number = odx/dx*dy;
				
				var node:ElementNode = line.getAssociatedElementNode()[0] as ElementNode;
				
				var label:Label = line.getLabel();
				label.text = "测试线条";
				label.x = node.centerPoint().x - odx;
				label.y = node.centerPoint().y - ody;
				
				workflowContent.addElement(label);
			}
			
			/**
			 * 画线
			 */
			protected function drawLineHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.CLICK :
						//结束当前画线，鼠标必须单击某个元素节点，否则删除当前线
						if(event.target is Group && event.currentTarget is Group)
						{
							this.removeLine();
						}
						break;
					
					case MouseEvent.MOUSE_MOVE :
						if(thisLine)
						{
							thisLine.setEndPoint(new Point(event.stageX-2,event.stageY-2));
							thisLine.draw();
						}
						break;
					
					default :
						break;
				}
			}
			
			private function stopDrawLine():void
			{
				thisLine = null;
			}
			
			private function removeLine():void
			{
				if(this.thisLine == null)return;
				
				for(var i:int=0, num:int=workflowContent.numElements; i<num; i++)
				{
					var line:ElementLine = workflowContent.getElementAt(i) as ElementLine;
					if(line && line == this.thisLine)
					{
							workflowContent.removeElement(line);
							line.clear();
							this.stopDrawLine();
							break;
					}
				}
			}
			
			/**
			 * 调用底层API画背景网格
			 */
			override protected function updateDisplayList(w:Number, h:Number):void
			{
				super.updateDisplayList(w,h);
				showOrHideGrid ? Global.drawBackgroundGrid(grid,w,h) : null;
			}
			
			/**
			 * 点击级件（IconTools）工具栏时，创建元素节点
			 */
			protected function createElementNodeHandler(event:CreateElementNodeEvent):void
			{
				var node:ElementNode = event.node;
				node.addEventListener(CreateElementLineEvent.CREATE_ELEMENT_LINE, createElementLineHandler,false,0,true);
				node.addEventListener(MouseEvent.CLICK,elementNodeHandler,false,0,true);
				node.addEventListener(MouseEvent.ROLL_OVER,elementNodeHandler,false,0,true);
				node.addEventListener(MouseEvent.MOUSE_DOWN, elementNodeHandler, false, 0, true);
				node.SID = this.countnode;
				workflowContent.addElement(node);
				
				this.countnode ++;
			}
			
			/**
			 * 取得当前舞台鼠标x,y点坐标
			 */
			private function stageMousePoint():Point
			{
				return new Point(this.stage.mouseX, this.stage.mouseY);
			}

		]]>
	</fx:Script> 
	
	<!--画背景网格线-->
	<mx:UIComponent id="grid" width="100%" height="100%"/>
	
	<!--元素节点容器-->
	<s:Scroller width="100%" height="100%" minWidth="0" minHeight="0" >
		<!--<s:Group id="workflowContent" width="100%" minHeight="0" minWidth="0"  top="122" bottom="23"  height="100%"/>-->
		<child:WorkflowContent id="workflowContent"/>
	</s:Scroller>
	 
	<!--画背景矩形-->
	<mx:UIComponent id="bgRect" width="100%" height="100%"/>
	
	<!--元素组件-->
	<child:IconTools id="iconTools"/>
	
	<!--
	<child:Junit id="junit" left="0" bottom="0"/>
	<child:Config/>--> 
	
	<!--标题栏-->
	<ui:TopNavigation id="topNavigation"/>
	
	<!--日志输出栏-->
	<ui:BottomNavigation id="bottomNavigation"/>

</s:Group>
