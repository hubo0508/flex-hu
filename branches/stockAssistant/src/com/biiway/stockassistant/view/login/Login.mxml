<?xml version="1.0" encoding="utf-8"?>
<loading:LoadingGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="com.biiway.stockassistant.components.*"
					  xmlns:loading="com.biiway.stockassistant.components.loading.*"
					  initialize="initializeHandler(event)"
					  creationComplete="creationCompleteHandler(event)"
					  width="395"
					  height="295">

	<fx:Script>
		<![CDATA[
			import com.biiway.stockassistant.core.ResizeManager;
			import com.biiway.stockassistant.event.LoginEvent;
			import com.biiway.stockassistant.util.Const;
			import com.biiway.stockassistant.util.StringUtil;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			import spark.components.WindowedApplication;
			
			private var cursorId:int = -1;
			
			protected function initializeHandler(event:FlexEvent):void
			{
				this.initEvent();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				focusManager.setFocus(usernametext); 
			}
			
			private function initEvent():void
			{
				minbg.addEventListener(MouseEvent.CLICK,minHandler,false,0,true);
				minbg.addEventListener(MouseEvent.MOUSE_OVER,minHandler,false,0,true);
				minbg.addEventListener(MouseEvent.MOUSE_OUT,minHandler,false,0,true);
				
				closebg.addEventListener(MouseEvent.CLICK,closeHandler,false,0,true);
				closebg.addEventListener(MouseEvent.MOUSE_OVER,closeHandler,false,0,true);
				closebg.addEventListener(MouseEvent.MOUSE_OUT,closeHandler,false,0,true);
				
				nativeGroup.addEventListener(MouseEvent.MOUSE_DOWN,nativeGroupHandler,false,0,true);
				
				addEventListener(MouseEvent.ROLL_OUT,mouseHandler,false,0,true);
				addEventListener(MouseEvent.ROLL_OVER,mouseHandler,false,0,true);
				addEventListener(MouseEvent.MOUSE_MOVE,mouseHandler,false,0,true);
				addEventListener(KeyboardEvent.KEY_DOWN, onEnterHandler,false,0,true);
				
				loginButton.addEventListener(MouseEvent.CLICK,loginButtonClickHandler,false,0,true);
				resetButton.addEventListener(MouseEvent.CLICK,resetButtonClickHandler,false,0,true);
				
				usernametext.addEventListener(FocusEvent.FOCUS_IN,focusEventHandler,false,0,true);
				usernametext.addEventListener(FocusEvent.FOCUS_OUT,focusEventHandler,false,0,true);
				passwordtext.addEventListener(FocusEvent.FOCUS_IN,focusEventHandler,false,0,true);
				passwordtext.addEventListener(FocusEvent.FOCUS_OUT,focusEventHandler,false,0,true);
			}
			
			protected function mouseHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						break;
					
					case MouseEvent.ROLL_OVER :
						trace("over");
						break;
					
					case MouseEvent.MOUSE_MOVE :
//						var w:Number = this.width - Const.GAP_SHADOW*2;
//						var _x:Number = event.localX;
//						var _y:Number = event.localY;
//						var lrX:Number = 4;
//						var lrY:Number = 4;
//						trace("w="+(w-lrX)+"  lrX="+lrX+" x="+event.localX+",y="+event.localY);
//						trace((_x>lrX) + "  " + (_x<(w-lrX)));
//						if(_x>lrX && _x<(w-lrX) && _y<lrY && cursorId == -1){
//							cursorId = CursorManager.setCursor(Const.verticalSize); 
//							trace(cursorId);
//						}else{
//							CursorManager.removeCursor(cursorId);
//							cursorId = -1;
//						}
						
						break;
					
					default:
						break;
				}
			}
			
			protected function resetButtonClickHandler(event:MouseEvent):void
			{
				usernametext.text = "";
				passwordtext.text = "";
				
				focusManager.setFocus(usernametext); 
			}
			
			protected function onEnterHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{ 
					this.loginButtonClickHandler();
				}
			}
			
			protected function loginButtonClickHandler(event:Event = null):void
			{
				var uname:String = usernametext.text; 
				var upassd:String = passwordtext.text;
				
				if(!validatorText(uname,upassd)){
					return;
				}

				focusManager.hideFocus();
				
				var e:LoginEvent  = new LoginEvent(LoginEvent.LOGIN_EVENT);
				e.username = uname;
				e.password = upassd;
				
				dispatchEvent(e);
			}
			
			protected function validatorText(uname:String,upassd:String):Boolean
			{
				if(StringUtil.isEmpty(uname) && StringUtil.isEmpty(upassd))
				{
					message("用户名与密码不能为空！");
					return false;
				}
				
				if(StringUtil.isEmpty(uname))
				{
					message("用户名不能为空！");
					return false;
				}
				
				if(StringUtil.isEmpty(upassd))
				{
					message("密码不能为空！");
					return false;
				}
				
				return true;
			}
			
			/**
			 * 用户登录面板消息提示。当将焦点从显示列表中的一个对象更改到另一个对象时，消息提示自动清空。
			 * 
			 * @param value:String 提示消息
			 * @param mark:Boolean(default=false) false：当前消息颜色为红色，异常消息。true：当前消息颜色为绿色，正常消息。
			 */
			public function message(value:String, mark:Boolean = false):void
			{
				if(messagelabel.text != value)
				{
					messagelabel.text = value;

					if(!mark && messagelabel.name == "success")
					{
						messagelabel.name = "failing";
						messagelabel.setStyle("color","#FF0000");
						return;
					}
					
					if(mark && messagelabel.name == "failing")
					{
						messagelabel.name = "success";
						messagelabel.setStyle("color","#1E9D00");
						return;
					}
				}
			}
			
			protected function nativeGroupHandler(event:MouseEvent):void
			{
				(parentApplication as WindowedApplication).nativeWindow.startMove();
			}
			
			protected function minHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.CLICK :
						(parentApplication as WindowedApplication).minimize();
						break;
					
					case MouseEvent.MOUSE_OVER :
						buttonBackgroundVisible(minbi_bg,true);
						break;
					
					case MouseEvent.MOUSE_OUT :
						buttonBackgroundVisible(minbi_bg,false);
						break;
					
					default :
						break;
				}
			}
			
			protected function closeHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.CLICK :
						(parentApplication as WindowedApplication).exit();
						break;
					
					case MouseEvent.MOUSE_OVER :
						buttonBackgroundVisible(closebi_bg,true);
						break;
					
					case MouseEvent.MOUSE_OUT :
						buttonBackgroundVisible(closebi_bg,false);
						break;
					
					default :
						break;
				}
			}
			
			private function buttonBackgroundVisible(bi:BitmapImage,visible:Boolean):void
			{
				if(bi && bi.visible != visible)
				{
					bi.visible = visible;	
				}
			}
			
			protected function focusEventHandler(event:FocusEvent):void
			{
				message("");
				
				var tinput:DefaultInput  = event.currentTarget as DefaultInput;
				var parentbc:BorderContainer = tinput.owner as BorderContainer;
				var bgColor:String = parentbc.getStyle("backgroundColor").toString();
				
				switch(event.type)
				{
					case FocusEvent.FOCUS_IN:
						parentbc.setStyle("backgroundColor",0xFFFFFF);
						break;
					
					case FocusEvent.FOCUS_OUT :
						parentbc.setStyle("backgroundColor",0xF2F3F5);
						break;
					
					default:
						break;
				}				
			} 
			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="loginEvent",type="com.biiway.stockassistant.event.LoginEvent")]
	</fx:Metadata>
	

	
	<s:BitmapImage x="{Const.GAP_SHADOW}" y="{Const.GAP_SHADOW}"  id="bi"
				   width="{395-Const.GAP_SHADOW*2}" 
				   height="{295-Const.GAP_SHADOW*2}" 
				   source="@Embed('assets/image/LoginBackground.png')">
		<s:filters>
			<flash.filters:DropShadowFilter id='dropShadowFilter' xmlns:flash.filters='flash.filters.*' 
											angle='90'
											blurX='10' blurY='10'
											distance='0'
											alpha='0.7' color='#000000' 
											knockout='false' quality='1'
											strength='1' inner='false' hideObject='false'/>
		</s:filters>
	</s:BitmapImage>
	
	<s:BorderContainer borderVisible="false" backgroundAlpha="0" cornerRadius="4" 
					   x="{Const.GAP_SHADOW}" y="{Const.GAP_SHADOW}"  id="resize"
					   width="{395-Const.GAP_SHADOW*2}" 
					   height="{295-Const.GAP_SHADOW*2}" />
	
	<!--标题头-->
	<s:Group id="nativeGroup" left="{Const.GAP_SHADOW}" right="{Const.GAP_SHADOW}" top="{Const.GAP_SHADOW}" height="30" useHandCursor="false" buttonMode="false"/>
	
	<!--标题头>最小按钮-->
	<s:Group id="minbg" right="41" top="{Const.GAP_SHADOW}" width="27" height="25" useHandCursor="true" buttonMode="true"/>
	<s:BitmapImage id="minbi_bg" visible="false" right="41" top="{Const.GAP_SHADOW}" source="@Embed('assets/image/max_min_background.png')"/>
	<s:BitmapImage id="minbi" right="48" top="18.5" source="@Embed('assets/image/min.png')"/>
	
	<!--标题头>关闭按钮-->
	<s:Group id="closebg"   right="13" top="{Const.GAP_SHADOW}" width="27" height="25" useHandCursor="true" buttonMode="true"/>
	<s:BitmapImage id="closebi_bg" visible="false" right="13" top="{Const.GAP_SHADOW}" source="@Embed('assets/image/close_background.png')"/>
	<s:BitmapImage id="closebi" right="20" top="12.5" source="@Embed('assets/image/close.png')"/>
	
	<!--标题头>按钮分隔线-->
	<s:BitmapImage right="12" top="{Const.GAP_SHADOW}"  source="@Embed('assets/image/CloseButtonSeparator.png')"/>
	
	<!--标题头>Logo-->
	<s:BitmapImage x="24" y="143" source="@Embed('assets/image/logo.png')"/>
	
	<!--用户名输入框-->
	<s:BorderContainer x="114" top="135" width="190" height="34" backgroundColor="#F2F3F5" borderVisible="false" cornerRadius="4">
		<s:filters> 
			<s:DropShadowFilter  angle='45' blurX='4' blurY='4' distance='0'
								 alpha='0.4' color='#000000'  knockout='false' quality='1'
								 strength='1' inner='false' hideObject='false'/>
		</s:filters>
		<s:BitmapImage left="6" source="@Embed('assets/image/userIcon.png')" verticalCenter="0"/>	
		<components:DefaultInput id="usernametext" emptyText="输入用户名" imeMode="CHINESE" borderVisible="false" verticalCenter="0" left="35" right="6" focusAlpha="0" contentBackgroundAlpha="0"/>
	</s:BorderContainer>
	
	<!--密码输入框-->
	<s:BorderContainer x="114" top="182" width="190" height="34" backgroundColor="#F2F3F5" borderVisible="false" cornerRadius="4">
		<s:filters> 
			<s:DropShadowFilter  angle='45' blurX='4' blurY='4' distance='0'
								 alpha='0.4' color='#000000'  knockout='false' quality='1'
								 strength='1' inner='false' hideObject='false'/>
		</s:filters>
		<s:BitmapImage left="6" source="@Embed('assets/image/passwordIcon.png')" verticalCenter="0"/>	
		<components:DefaultInput id="passwordtext" emptyText="输入密码" displayAsPassword="true" imeMode="CHINESE" borderVisible="false" verticalCenter="0" left="35" right="6" focusAlpha="0" contentBackgroundAlpha="0"/>
	</s:BorderContainer>

	<!--其它文本信息-->
	<s:Label right="24" top="145" color="#2786E4" fontSize="13" text="注册帐号" useHandCursor="true" buttonMode="true"/>
	<s:Label right="24" top="190" color="#2786E4" fontSize="13" text="找回密码" useHandCursor="true" buttonMode="true"/>
	
	<!--消息提示信息-->
	<s:Label id="messagelabel" name="failing" y="224" right="90" color="#FF0000" fontSize="12" text=""/>
	
	<!--按钮-->
	<s:Button id="loginButton" right="90" bottom="25" width="59" height="26" label="登录" buttonMode="true" fontSize="13" skinClass="assets.skin.LoginBtnSkin" useHandCursor="true"/>
	<s:Button id="resetButton" right="160" bottom="25" width="59" height="26" label="重置" buttonMode="true" fontSize="13" skinClass="assets.skin.LoginBtnSkin" useHandCursor="true"/>
	
</loading:LoadingGroup>
