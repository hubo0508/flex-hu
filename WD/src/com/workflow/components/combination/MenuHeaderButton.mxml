<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:primitives="com.workflow.primitives.*"
		 rollOver="thisHandler(event)"
		 rollOut="thisHandler(event)"
		 click="thisHandler(event)" 
		 mouseUp="thisHandler(event)" 
		 mouseDown="thisHandler(event)"
		 useHandCursor="true"
		 buttonMode="true" 
		 height="37"
		 minWidth="85">
	
	<fx:Script>
		<![CDATA[
			import com.workflow.components.extend.ECheckBox;
			import com.workflow.components.extend.ERadioButton;
			import com.workflow.skin.components.MenuHeaderButton_CheckBoxSkin;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			
			import spark.components.CheckBox;
			import spark.components.Label;
			import spark.components.RadioButton;
			
			//********************************************************
			// 重写函数 S
			//********************************************************
			
			override protected function updateDisplayList(w:Number, h:Number):void
			{
				super.updateDisplayList(w,h);
				
				var displayObject:Object = lastElement();
				if(displayObject is Label || displayObject is CheckBox || displayObject is RadioButton)
				{
					displayObject.maxWidth = this.width - 5;
				}
			}
			
			override protected function commitProperties():void
			{
				//trace("commitProperties");
				super.commitProperties();
			}
			
			override protected function measure():void
			{
				//trace("measure");
				super.commitProperties();
			}
			
			override protected function createChildren():void
			{
				//trace("createChildren");
				super.createChildren();
				
				switch(type)
				{
					case "Text" :
						createAndDisplayText();
						break;
					
					case "Image" :
						break;
					
					case "CheckBox" :
						createAndDisplayCheckBox();
						break;
					
					case "RadioButton" :
						createAndDisplayRadioButton();
						break;
					
					default :
						break;
				}
			} 
			
			//********************************************************
			// 重写函数 E
			//********************************************************
			
			/**
			 * 初始化显示文本
			 */
			private function createAndDisplayText():void
			{
				var label:Label = new Label();
				label.horizontalCenter = 0;
				label.text = text;
				label.verticalCenter = 0;
				//label.maxWidth = this.width - 5;
				
				this.addElement(label);
			}
			
			/**
			 * 初始化单选框
			 */
			private function createAndDisplayRadioButton():void
			{
				var radioButton:RadioButton = new RadioButton();
				radioButton.horizontalCenter = 0; 
				radioButton.label = text;
				radioButton.verticalCenter = 0;
				radioButton.addEventListener(MouseEvent.CLICK, function buttonState(event:MouseEvent):void
				{
					event.stopPropagation();
					clickMenuButtonDispatch();
				},false,0,true);
				
				this.addElement(radioButton);
			}
			
			/**
			 * 初始化复选框
			 */
			private function createAndDisplayCheckBox():void
			{
				var checkbox:ECheckBox = new ECheckBox();
				checkbox.setStyle("skinClass",Class(MenuHeaderButton_CheckBoxSkin));
				checkbox.horizontalCenter = 0; 
				checkbox.label = text;
				checkbox.verticalCenter = 0;
				checkbox.addEventListener(MouseEvent.CLICK, function buttonState(event:MouseEvent):void
				{
					event.stopPropagation();
					clickMenuButtonDispatch();
				},false,0,true);
				
				this.addElement(checkbox);
			}
			
			/**
			 * 当前菜单容器事件调用
			 */
			protected function thisHandler(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT :
						setBgrectVisible(false);
						setBoxHovered(false);
						
						break;
					
					case MouseEvent.ROLL_OVER :
						setBgrectVisible(true);
						setBoxHovered(true);
						break;
					
					case MouseEvent.CLICK :
						this.setBoxState();
						this.clickMenuButtonDispatch();
						break;
					
					case MouseEvent.MOUSE_UP :
						break;
					
					case MouseEvent.MOUSE_DOWN :
						break;
					
					default:
						break;
				}
			}
			
			private function setMenuButtonTextColor(color:uint):void
			{
				var element:Object = this.lastElement();
				if(element is Label || element is spark.components.CheckBox || element is RadioButton){
					element.setStyle("color",color);
				}
			}
			
			/**
			 * 点击菜单按钮派发事件
			 * 
			 * @param dyEvent.text : 菜单名称
			 * @param dyEvent.etype : 菜单类型
			 * @param dyEvent.selected ： 是否选中
			 * 
			 * @see com.workflow.components.combination.MenuHeaderButton.type()
			 */
			private function clickMenuButtonDispatch():void
			{
				var dyEvent:DynamicEvent = new DynamicEvent("handler");
				dyEvent.text = this.text;
				dyEvent.etype = this.type;
				if(this.type == "CheckBox" || this.type == "RadioButton"){
					dyEvent.selected = this.lastElement().selected
				}
				
				this.dispatchEvent(dyEvent);
			}
			
			/**
			 * 设置单选框或多选框鼠标移入样式
			 */
			private function setBoxHovered(value:Boolean):void
			{
				var box:Object = lastElement();
				if(box is ECheckBox || box is ERadioButton){
					box.setHovered(value);
				}
			}
			
			/**
			 * 设置单选框或多选框状态
			 */
			private function setBoxState():void
			{
				if(this.type == "CheckBox" || this.type == "RadioButton"){
					this.lastElement().selected = !lastElement().selected;
				}
			}
			
			/**
			 * 取得最后一个元素
			 */
			private function lastElement():Object
			{
				return this.getElementAt(this.numElements-1);
			}
			
			/**
			 * 显示或隐藏背景颜色
			 */
			private function setBgrectVisible(value:Boolean):void
			{
				bgrect.visible != value ? bgrect.visible = value : null;
			}
			
			private var _text:String;
			
			[Bindable(event="text")]
			public function get text():String
			{
				return _text;
			}
			
			public function set text(value:String):void
			{
				_text = value;
				
				this.dispatchEvent(new Event("text"));
			}
			
			private var _type:String = "Text";
			
			[Inspectable(enumeration="Text,Image,CheckBox,RadioButton", defaultValue="Text")]
			public function get type():String
			{
				return _type;
			}
			
			public function set type(value:String):void
			{
				_type = value;
			}
			
			
			//********************************************************
			// 垃圾回收
			//********************************************************
			public function cleanUp():void
			{
				
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="handler",type="mx.events.DynamicEvent")]
	</fx:Metadata>
	
	<s:Rect id="bgrect" height="100%" width="100%" visible="false">
		<s:fill>
			<s:SolidColor color="#E6E6E6"/>
		</s:fill>
	</s:Rect>	
	
	<primitives:VLine x="0" y="0" bottom="0" top="0"/>
	
	<!--<s:Label horizontalCenter="0" text="{text}" verticalCenter="0" maxWidth="80"/>-->
	
</s:Group>
