<?xml version="1.0" encoding="utf-8"?>
<!--
	//*********************************************
	// C:2013.04.25
	// HUBO
	// hubo.0508@gmail.com
	//*********************************************
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:child="com.workflow.ui.child.*"
		 xmlns:header="com.workflow.ui.header.*"
		 xmlns:log="com.workflow.ui.log.*"
		 xmlns:content="com.workflow.ui.content.*"
		 creationComplete="creationCompleteHandler(event)"
		 width="100%"
		 height="100%"
		 minHeight="0"
		 minWidth="0">
	
	<fx:Script>
		<![CDATA[
			import com.workflow.core.TweenLite;
			import com.workflow.ui.header.MenuHeader_Button;
			import com.workflow.ui.header.MenuHeader_DropdownWindow;
			import com.workflow.ui.header.ProcessElements;
			import com.workflow.util.Util;
			
			import mx.events.CloseEvent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			
			//下拉菜单 S
			private var dropdownWindow:MenuHeader_DropdownWindow;
			
			private var hideTimer:Timer;
			
			private var cacheDropdownWindow:Array = [];
			//下拉菜单 E
			
			private var processElements:ProcessElements;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.initEvent();
			}
			
			private function initEvent():void
			{
				menuheader.addEventListener(MenuHeader_Button.CLICK_MHB,clickMenuHeaderButtonHandler,false,0,true);
				menuheader.addEventListener(MenuHeader_Button.ROLLOUT_MHB,rolloutMenuHeaderButton,false,0,true);
				menuheader.addEventListener(MenuHeader_Button.ROLLOVER_MHB,rolloverMenuHeaderButton,false,0,true);

				logoutbar.addEventListener(LogOutputBar.HIDE_OR_DISPLAY,hideOrDisplayHandler,false,0,true);
			}
			
			protected function hideOrDisplayHandler(event:DynamicEvent):void
			{
				menuheader.updateMenuHeaderButtonState("日志",event.value);
			}
			
			//////////////////////////////////////////////////////////////////////////////////////////////////
			// 菜单移出、移入、点击 S
			//////////////////////////////////////////////////////////////////////////////////////////////////
			
			protected function rolloutMenuHeaderButton(event:DynamicEvent):void
			{
				if(event.text == "对齐" || event.text == "窗口")
				{
					if(this.mouseY > ((event.y + event.height)-1)){
						timerHideDropdownWindow(event.text);
					}else{
						directClearDropdownWindow(event.text);				
					}
				}
				
				event.stopPropagation();
			}
			
			protected function rolloverMenuHeaderButton(event:DynamicEvent):void
			{
				if(event.text == "对齐" || event.text == "窗口")
				{
					if(dropdownWindow == null && cacheDropdownWindow[event.text] == null){
						var data:Array = event.text == "对齐" ? aligndata : windowdata;
						dropdownWindow = createDropdownWindow(event,data);
						cacheDropdownWindow[event.text] = dropdownWindow;
					}else{
						dropdownWindow = cacheDropdownWindow[event.text];
					}
					
					addElementAt(dropdownWindow,1);
					menuheader.setMenuHeaderButtonColor(event.text,0xFF0000);
				}
				
				event.stopPropagation();
			}
			
			private function createDropdownWindow(event:Object, data:Array):MenuHeader_DropdownWindow
			{
				var dWindow:MenuHeader_DropdownWindow = new MenuHeader_DropdownWindow();
				dWindow.parentMenu = event.text;
				dWindow.dataProvider = data;
				dWindow.x = event.x;
				dWindow.y = event.y + event.height;
				dWindow.addEventListener(MouseEvent.ROLL_OVER,dropdownWindowHandler,false,0,true);
				dWindow.addEventListener(MouseEvent.ROLL_OUT,dropdownWindowHandler,false,0,true);
				dWindow.addEventListener(MenuHeader_DropdownWindow.CLICK_ITEM,dropdownWindowHandler,false,0,true);
				
				return dWindow;
			}
			
			private function timerHideDropdownWindow(text:String, delay:Number = 80):void
			{
				Util.stopTimer(hideTimer);
				
				hideTimer = new Timer(delay, 1);
				hideTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function closeAlert(event:Event):void{
					directClearDropdownWindow(text);
				}, false, 0, true);
				
				hideTimer.start();
			}
			
			private function directClearDropdownWindow(text:String):void
			{
				try{removeElement(cacheDropdownWindow[text]);}catch(e:Error){}				
				dropdownWindow = null;
				Util.stopTimer(hideTimer);
				menuheader.setMenuHeaderButtonColor(text,0x000000);
			}
			
			protected function dropdownWindowHandler(event:Object):void
			{
				switch(event.type)
				{
					case MouseEvent.ROLL_OUT  : 
						timerHideDropdownWindow(event.currentTarget.parentMenu);
						break;
					
					case MouseEvent.ROLL_OVER : 
						Util.stopTimer(hideTimer); 
						menuheader.setMenuHeaderButtonColor(event.currentTarget.parentMenu,0xFF0000);
						break;
					
					case MenuHeader_DropdownWindow.CLICK_ITEM :
						timerHideDropdownWindow(event.currentTarget.parentMenu);
						
						if(event.text == "流程元素")
						{
							if(event.selected){
								if(processElements == null)
								{
									processElements = new ProcessElements();
									processElements.title = event.text;
									processElements.parentMenu = event.currentTarget.parentMenu;
									processElements.addEventListener(CloseEvent.CLOSE,function closeHandler(event:CloseEvent):void
									{
										PopUpManager.removePopUp(processElements);
										
										var mDropdwon:MenuHeader_DropdownWindow = cacheDropdownWindow[event.currentTarget.parentMenu] as MenuHeader_DropdownWindow;
										mDropdwon.setCheckBoxState(event.currentTarget.title, false);
									},false,0,true);
								}
								processElements.x = 60; 
								processElements.y = 170;
								
								processElements.isPopUp ? null : PopUpManager.addPopUp(processElements,parentApplication as DisplayObject);
							}else{
								PopUpManager.removePopUp(processElements);
							}
						}
						
						break;
					
					default: break;
				}
			}
			
			protected function clickMenuHeaderButtonHandler(event:DynamicEvent):void
			{
				trace("event.text = " + event.text + "    etype = " + event.etype + "     selected = " + event.selected);
				switch(event.text)
				{
					case "立即保存" :
						break;
					
					case "舍弃" :
						break;
					
					case "验证" : 
						break;
					
					case "网格" :
						event.selected ? Util.drawGrid(content) : content.graphics.clear();
						break;
					
					case "日志" :
						logoutbar.hideOrDisplayDetail();
						break;
					
					default : event.stopPropagation(); break;
				}
			}
			
			//////////////////////////////////////////////////////////////////////////////////////////////////
			// 菜单移出、移入、点击 E
			//////////////////////////////////////////////////////////////////////////////////////////////////
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="aligndata">
			<fx:Object text="顶对齐"   type="Image"  image="assets/workflow/image/layers-alignment.png"/>
			<fx:Object text="垂直中齐" type="Image"  image="assets/workflow/image/layers-alignment-center.png"/>
			<fx:Object text="下对齐"   type="Image"  image="assets/workflow/image/layers-alignment-bottom.png"/>
			<fx:Object text="左对齐"   type="Image"  image="assets/workflow/image/layers-alignment-left.png"/>
			<fx:Object text="水平中齐" type="Image"  image="assets/workflow/image/layers-alignment-middle.png"/>
			<fx:Object text="右对齐"   type="Image"  image="assets/workflow/image/layers-alignment-right.png"/>
		</fx:Array>
		<fx:Array id="windowdata">
			<fx:Object text="流程元素" type="CheckBox" initial="click"/>
		</fx:Array>
	</fx:Declarations>
	
	<content:Content id="content"/>
	
	<header:LogoHeader width="{menuheader.width}"/>
	
	<header:MenuHeader id="menuheader" workflowName="请假审核流定义"/>
	
	<log:LogOutputBar id="logoutbar"/>
	
</s:Group>
